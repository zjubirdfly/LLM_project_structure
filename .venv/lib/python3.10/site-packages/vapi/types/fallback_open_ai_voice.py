# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .chunk_plan import ChunkPlan
from .fallback_open_ai_voice_id import FallbackOpenAiVoiceId
from .fallback_open_ai_voice_model import FallbackOpenAiVoiceModel


class FallbackOpenAiVoice(UncheckedBaseModel):
    caching_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cachingEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This is the flag to toggle voice caching for the assistant.
    """

    provider: typing.Literal["openai"] = pydantic.Field(default="openai")
    """
    This is the voice provider that will be used.
    """

    voice_id: typing_extensions.Annotated[FallbackOpenAiVoiceId, FieldMetadata(alias="voiceId")] = pydantic.Field()
    """
    This is the provider-specific ID that will be used.
    Please note that ash, ballad, coral, sage, and verse may only be used with realtime models.
    """

    model: typing.Optional[FallbackOpenAiVoiceModel] = pydantic.Field(default=None)
    """
    This is the model that will be used for text-to-speech.
    """

    instructions: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is a prompt that allows you to control the voice of your generated audio.
    Does not work with 'tts-1' or 'tts-1-hd' models.
    """

    speed: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the speed multiplier that will be used.
    """

    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the plan for chunking the model output before it is sent to the voice provider.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
