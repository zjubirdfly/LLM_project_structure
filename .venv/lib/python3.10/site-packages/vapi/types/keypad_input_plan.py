# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .keypad_input_plan_delimiters import KeypadInputPlanDelimiters


class KeypadInputPlan(UncheckedBaseModel):
    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    This keeps track of whether the user has enabled keypad input.
    By default, it is off.
    
    @default false
    """

    timeout_seconds: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="timeoutSeconds")] = (
        pydantic.Field(default=None)
    )
    """
    This is the time in seconds to wait before processing the input.
    If the input is not received within this time, the input will be ignored.
    If set to "off", the input will be processed when the user enters a delimiter or immediately if no delimiter is used.
    
    @default 2
    """

    delimiters: typing.Optional[KeypadInputPlanDelimiters] = pydantic.Field(default=None)
    """
    This is the delimiter(s) that will be used to process the input.
    Can be '#', '*', or an empty array.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
