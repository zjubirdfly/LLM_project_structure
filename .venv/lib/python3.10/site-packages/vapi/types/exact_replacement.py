# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class ExactReplacement(UncheckedBaseModel):
    type: typing.Literal["exact"] = pydantic.Field(default="exact")
    """
    This is the exact replacement type. You can use this to replace a specific word or phrase with a different word or phrase.
    
    Usage:
    - Replace "hello" with "hi": { type: 'exact', key: 'hello', value: 'hi' }
    - Replace "good morning" with "good day": { type: 'exact', key: 'good morning', value: 'good day' }
    - Replace a specific name: { type: 'exact', key: 'John Doe', value: 'Jane Smith' }
    - Replace an acronym: { type: 'exact', key: 'AI', value: 'Artificial Intelligence' }
    - Replace a company name with its phonetic pronunciation: { type: 'exact', key: 'Vapi', value: 'Vappy' }
    """

    replace_all_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="replaceAllEnabled")
    ] = pydantic.Field(default=None)
    """
    This option let's you control whether to replace all instances of the key or only the first one. By default, it only replaces the first instance.
    Examples:
    - For { type: 'exact', key: 'hello', value: 'hi', replaceAllEnabled: false }. Before: "hello world, hello universe" | After: "hi world, hello universe"
    - For { type: 'exact', key: 'hello', value: 'hi', replaceAllEnabled: true }. Before: "hello world, hello universe" | After: "hi world, hi universe"
    @default false
    """

    key: str = pydantic.Field()
    """
    This is the key to replace.
    """

    value: str = pydantic.Field()
    """
    This is the value that will replace the match.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
