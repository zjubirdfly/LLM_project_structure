# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .voice_library_gender import VoiceLibraryGender


class VoiceLibrary(UncheckedBaseModel):
    provider: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    This is the voice provider that will be used.
    """

    provider_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="providerId")] = pydantic.Field(
        default=None
    )
    """
    The ID of the voice provided by the provider.
    """

    slug: typing.Optional[str] = pydantic.Field(default=None)
    """
    The unique slug of the voice.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the voice.
    """

    language: typing.Optional[str] = pydantic.Field(default=None)
    """
    The language of the voice.
    """

    language_code: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="languageCode")] = (
        pydantic.Field(default=None)
    )
    """
    The language code of the voice.
    """

    model: typing.Optional[str] = pydantic.Field(default=None)
    """
    The model of the voice.
    """

    supported_models: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="supportedModels")] = (
        pydantic.Field(default=None)
    )
    """
    The supported models of the voice.
    """

    gender: typing.Optional[VoiceLibraryGender] = pydantic.Field(default=None)
    """
    The gender of the voice.
    """

    accent: typing.Optional[str] = pydantic.Field(default=None)
    """
    The accent of the voice.
    """

    preview_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="previewUrl")] = pydantic.Field(
        default=None
    )
    """
    The preview URL of the voice.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The description of the voice.
    """

    credential_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="credentialId")] = (
        pydantic.Field(default=None)
    )
    """
    The credential ID of the voice.
    """

    id: str = pydantic.Field()
    """
    The unique identifier for the voice library.
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    The unique identifier for the organization that this voice library belongs to.
    """

    is_public: typing_extensions.Annotated[bool, FieldMetadata(alias="isPublic")] = pydantic.Field()
    """
    The Public voice is shared accross all the organizations.
    """

    is_deleted: typing_extensions.Annotated[bool, FieldMetadata(alias="isDeleted")] = pydantic.Field()
    """
    The deletion status of the voice.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    The ISO 8601 date-time string of when the voice library was created.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    The ISO 8601 date-time string of when the voice library was last updated.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
