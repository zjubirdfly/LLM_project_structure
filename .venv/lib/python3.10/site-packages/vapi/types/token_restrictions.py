# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class TokenRestrictions(UncheckedBaseModel):
    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    This determines whether the token is enabled or disabled. Default is true, it's enabled.
    """

    allowed_origins: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="allowedOrigins")
    ] = pydantic.Field(default=None)
    """
    This determines the allowed origins for this token. Validates the `Origin` header. Default is any origin.
    
    Only relevant for `public` tokens.
    """

    allowed_assistant_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="allowedAssistantIds")
    ] = pydantic.Field(default=None)
    """
    This determines which assistantIds can be used when creating a call. Default is any assistantId.
    
    Only relevant for `public` tokens.
    """

    allow_transient_assistant: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="allowTransientAssistant")
    ] = pydantic.Field(default=None)
    """
    This determines whether transient assistants can be used when creating a call. Default is true.
    
    If `allowedAssistantIds` is provided, this is automatically false.
    
    Only relevant for `public` tokens.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
