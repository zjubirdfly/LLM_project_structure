# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .vapi_cost_sub_type import VapiCostSubType


class VapiCost(UncheckedBaseModel):
    type: typing.Literal["vapi"] = pydantic.Field(default="vapi")
    """
    This is the type of cost, always 'vapi' for this class.
    """

    sub_type: typing_extensions.Annotated[VapiCostSubType, FieldMetadata(alias="subType")] = pydantic.Field()
    """
    This is the sub type of the cost.
    """

    minutes: float = pydantic.Field()
    """
    This is the minutes of Vapi usage. This should match `call.endedAt` - `call.startedAt`.
    """

    cost: float = pydantic.Field()
    """
    This is the cost of the component in USD.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
