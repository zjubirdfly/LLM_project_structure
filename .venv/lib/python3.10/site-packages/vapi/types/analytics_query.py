# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .analytics_operation import AnalyticsOperation
from .analytics_query_group_by_item import AnalyticsQueryGroupByItem
from .analytics_query_table import AnalyticsQueryTable
from .time_range import TimeRange


class AnalyticsQuery(UncheckedBaseModel):
    table: AnalyticsQueryTable = pydantic.Field()
    """
    This is the table you want to query.
    """

    group_by: typing_extensions.Annotated[
        typing.Optional[typing.List[AnalyticsQueryGroupByItem]], FieldMetadata(alias="groupBy")
    ] = pydantic.Field(default=None)
    """
    This is the list of columns you want to group by.
    """

    name: str = pydantic.Field()
    """
    This is the name of the query. This will be used to identify the query in the response.
    """

    time_range: typing_extensions.Annotated[typing.Optional[TimeRange], FieldMetadata(alias="timeRange")] = (
        pydantic.Field(default=None)
    )
    """
    This is the time range for the query.
    """

    operations: typing.List[AnalyticsOperation] = pydantic.Field()
    """
    This is the list of operations you want to perform.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
