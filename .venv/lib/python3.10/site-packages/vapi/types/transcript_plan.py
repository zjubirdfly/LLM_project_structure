# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class TranscriptPlan(UncheckedBaseModel):
    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    This determines whether the transcript is stored in `call.artifact.transcript`. Defaults to true.
    
    @default true
    """

    assistant_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantName")] = (
        pydantic.Field(default=None)
    )
    """
    This is the name of the assistant in the transcript. Defaults to 'AI'.
    
    Usage:
    - If you want to change the name of the assistant in the transcript, set this. Example, here is what the transcript would look like with `assistantName` set to 'Buyer':
    ```
    User: Hello, how are you?
    Buyer: I'm fine.
    User: Do you want to buy a car?
    Buyer: No.
    ```
    
    @default 'AI'
    """

    user_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="userName")] = pydantic.Field(
        default=None
    )
    """
    This is the name of the user in the transcript. Defaults to 'User'.
    
    Usage:
    - If you want to change the name of the user in the transcript, set this. Example, here is what the transcript would look like with `userName` set to 'Seller':
    ```
    Seller: Hello, how are you?
    AI: I'm fine.
    Seller: Do you want to buy a car?
    AI: No.
    ```
    
    @default 'User'
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
