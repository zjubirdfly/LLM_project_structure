# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .analysis_cost_breakdown import AnalysisCostBreakdown


class CostBreakdown(UncheckedBaseModel):
    transport: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the cost of the transport provider, like Twilio or Vonage.
    """

    stt: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the cost of the speech-to-text service.
    """

    llm: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the cost of the language model.
    """

    tts: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the cost of the text-to-speech service.
    """

    vapi: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the cost of Vapi.
    """

    total: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the total cost of the call.
    """

    llm_prompt_tokens: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="llmPromptTokens")] = (
        pydantic.Field(default=None)
    )
    """
    This is the LLM prompt tokens used for the call.
    """

    llm_completion_tokens: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="llmCompletionTokens")
    ] = pydantic.Field(default=None)
    """
    This is the LLM completion tokens used for the call.
    """

    tts_characters: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="ttsCharacters")] = (
        pydantic.Field(default=None)
    )
    """
    This is the TTS characters used for the call.
    """

    analysis_cost_breakdown: typing_extensions.Annotated[
        typing.Optional[AnalysisCostBreakdown], FieldMetadata(alias="analysisCostBreakdown")
    ] = pydantic.Field(default=None)
    """
    This is the cost of the analysis.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
