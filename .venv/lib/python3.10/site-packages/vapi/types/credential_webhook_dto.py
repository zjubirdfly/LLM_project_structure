# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .credential_end_user import CredentialEndUser
from .credential_session_error import CredentialSessionError
from .credential_webhook_dto_auth_mode import CredentialWebhookDtoAuthMode
from .credential_webhook_dto_operation import CredentialWebhookDtoOperation
from .credential_webhook_dto_type import CredentialWebhookDtoType


class CredentialWebhookDto(UncheckedBaseModel):
    type: CredentialWebhookDtoType
    operation: CredentialWebhookDtoOperation
    from_: typing_extensions.Annotated[str, FieldMetadata(alias="from")]
    connection_id: typing_extensions.Annotated[str, FieldMetadata(alias="connectionId")]
    auth_mode: typing_extensions.Annotated[CredentialWebhookDtoAuthMode, FieldMetadata(alias="authMode")]
    provider_config_key: typing_extensions.Annotated[str, FieldMetadata(alias="providerConfigKey")]
    provider: str
    environment: str
    success: bool
    end_user: typing_extensions.Annotated[CredentialEndUser, FieldMetadata(alias="endUser")]
    error: typing.Optional[CredentialSessionError] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
