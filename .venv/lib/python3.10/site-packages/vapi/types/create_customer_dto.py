# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .assistant_overrides import AssistantOverrides


class CreateCustomerDto(UncheckedBaseModel):
    number_e_164_check_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="numberE164CheckEnabled")
    ] = pydantic.Field(default=None)
    """
    This is the flag to toggle the E164 check for the `number` field. This is an advanced property which should be used if you know your use case requires it.
    
    Use cases:
    - `false`: To allow non-E164 numbers like `+001234567890`, `1234`, or `abc`. This is useful for dialing out to non-E164 numbers on your SIP trunks.
    - `true` (default): To allow only E164 numbers like `+14155551234`. This is standard for PSTN calls.
    
    If `false`, the `number` is still required to only contain alphanumeric characters (regex: `/^\+?[a-zA-Z0-9]+$/`).
    
    @default true (E164 check is enabled)
    """

    extension: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the extension that will be dialed after the call is answered.
    """

    assistant_overrides: typing_extensions.Annotated[
        typing.Optional[AssistantOverrides], FieldMetadata(alias="assistantOverrides")
    ] = pydantic.Field(default=None)
    """
    These are the overrides for the assistant's settings and template variables specific to this customer.
    This allows customization of the assistant's behavior for individual customers in batch calls.
    """

    number: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the number of the customer.
    """

    sip_uri: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="sipUri")] = pydantic.Field(
        default=None
    )
    """
    This is the SIP URI of the customer.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of the customer. This is just for your own reference.
    
    For SIP inbound calls, this is extracted from the `From` SIP header with format `"Display Name" <sip:username@domain>`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
