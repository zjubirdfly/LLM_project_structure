# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .artifact import Artifact
from .call import Call
from .create_assistant_dto import CreateAssistantDto
from .create_customer_dto import CreateCustomerDto
from .server_message_transcript_phone_number import ServerMessageTranscriptPhoneNumber
from .server_message_transcript_role import ServerMessageTranscriptRole
from .server_message_transcript_transcript_type import ServerMessageTranscriptTranscriptType
from .server_message_transcript_type import ServerMessageTranscriptType


class ServerMessageTranscript(UncheckedBaseModel):
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageTranscriptPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = pydantic.Field(default=None)
    """
    This is the phone number that the message is associated with.
    """

    type: ServerMessageTranscriptType = pydantic.Field()
    """
    This is the type of the message. "transcript" is sent as transcriber outputs partial or final transcript.
    """

    timestamp: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the timestamp of the message.
    """

    artifact: typing.Optional[Artifact] = pydantic.Field(default=None)
    """
    This is a live version of the `call.artifact`.
    
    This matches what is stored on `call.artifact` after the call.
    """

    assistant: typing.Optional[CreateAssistantDto] = pydantic.Field(default=None)
    """
    This is the assistant that the message is associated with.
    """

    customer: typing.Optional[CreateCustomerDto] = pydantic.Field(default=None)
    """
    This is the customer that the message is associated with.
    """

    call: typing.Optional[Call] = pydantic.Field(default=None)
    """
    This is the call that the message is associated with.
    """

    role: ServerMessageTranscriptRole = pydantic.Field()
    """
    This is the role for which the transcript is for.
    """

    transcript_type: typing_extensions.Annotated[
        ServerMessageTranscriptTranscriptType, FieldMetadata(alias="transcriptType")
    ] = pydantic.Field()
    """
    This is the type of the transcript.
    """

    transcript: str = pydantic.Field()
    """
    This is the transcript content.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
