# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .condition import Condition
from .text_content import TextContent


class ToolMessageDelayed(UncheckedBaseModel):
    contents: typing.Optional[typing.List[TextContent]] = pydantic.Field(default=None)
    """
    This is an alternative to the `content` property. It allows to specify variants of the same content, one per language.
    
    Usage:
    - If your assistants are multilingual, you can provide content for each language.
    - If you don't provide content for a language, the first item in the array will be automatically translated to the active language at that moment.
    
    This will override the `content` property.
    """

    type: typing.Literal["request-response-delayed"] = pydantic.Field(default="request-response-delayed")
    """
    This message is triggered when the tool call is delayed.
    
    There are the two things that can trigger this message:
    1. The user talks with the assistant while your server is processing the request. Default is "Sorry, a few more seconds."
    2. The server doesn't respond within `timingMilliseconds`.
    
    This message is never triggered for async tool calls.
    """

    timing_milliseconds: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="timingMilliseconds")
    ] = pydantic.Field(default=None)
    """
    The number of milliseconds to wait for the server response before saying this message.
    """

    content: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the content that the assistant says when this message is triggered.
    """

    conditions: typing.Optional[typing.List[Condition]] = pydantic.Field(default=None)
    """
    This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
