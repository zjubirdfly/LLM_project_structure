# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .call import Call
from .client_message_tool_calls_result_phone_number import ClientMessageToolCallsResultPhoneNumber
from .create_assistant_dto import CreateAssistantDto
from .create_customer_dto import CreateCustomerDto


class ClientMessageToolCallsResult(UncheckedBaseModel):
    phone_number: typing_extensions.Annotated[
        typing.Optional[ClientMessageToolCallsResultPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = pydantic.Field(default=None)
    """
    This is the phone number that the message is associated with.
    """

    type: typing.Literal["tool-calls-result"] = pydantic.Field(default="tool-calls-result")
    """
    This is the type of the message. "tool-calls-result" is sent to forward the result of a tool call to the client.
    """

    timestamp: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the timestamp of the message.
    """

    call: typing.Optional[Call] = pydantic.Field(default=None)
    """
    This is the call that the message is associated with.
    """

    customer: typing.Optional[CreateCustomerDto] = pydantic.Field(default=None)
    """
    This is the customer that the message is associated with.
    """

    assistant: typing.Optional[CreateAssistantDto] = pydantic.Field(default=None)
    """
    This is the assistant that the message is associated with.
    """

    tool_call_result: typing_extensions.Annotated[
        typing.Dict[str, typing.Optional[typing.Any]], FieldMetadata(alias="toolCallResult")
    ] = pydantic.Field()
    """
    This is the result of the tool call.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
