# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class VoicemailDetectionBackoffPlan(UncheckedBaseModel):
    start_at_seconds: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="startAtSeconds")] = (
        pydantic.Field(default=None)
    )
    """
    This is the number of seconds to wait before starting the first retry attempt.
    """

    frequency_seconds: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="frequencySeconds")] = (
        pydantic.Field(default=None)
    )
    """
    This is the interval in seconds between retry attempts.
    """

    max_retries: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="maxRetries")] = (
        pydantic.Field(default=None)
    )
    """
    This is the maximum number of retry attempts before giving up.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
