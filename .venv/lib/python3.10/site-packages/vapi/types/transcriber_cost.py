# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel


class TranscriberCost(UncheckedBaseModel):
    type: typing.Literal["transcriber"] = pydantic.Field(default="transcriber")
    """
    This is the type of cost, always 'transcriber' for this class.
    """

    transcriber: typing.Dict[str, typing.Optional[typing.Any]] = pydantic.Field()
    """
    This is the transcriber that was used during the call.
    
    This matches one of the below:
    - `call.assistant.transcriber`,
    - `call.assistantId->transcriber`,
    - `call.squad[n].assistant.transcriber`,
    - `call.squad[n].assistantId->transcriber`,
    - `call.squadId->[n].assistant.transcriber`,
    - `call.squadId->[n].assistantId->transcriber`.
    """

    minutes: float = pydantic.Field()
    """
    This is the minutes of `transcriber` usage. This should match `call.endedAt` - `call.startedAt` for single assistant calls, while squad calls will have multiple transcriber costs one for each assistant that was used.
    """

    cost: float = pydantic.Field()
    """
    This is the cost of the component in USD.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
