# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .transfer_fallback_plan_message import TransferFallbackPlanMessage


class TransferFallbackPlan(UncheckedBaseModel):
    message: TransferFallbackPlanMessage = pydantic.Field()
    """
    This is the message the assistant will deliver to the customer if the transfer fails.
    """

    end_call_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="endCallEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This controls what happens after delivering the failure message to the customer.
    - true: End the call after delivering the failure message (default)
    - false: Keep the assistant on the call to continue handling the customer's request
    
    @default true
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
