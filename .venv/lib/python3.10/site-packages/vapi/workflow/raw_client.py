# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..types.create_workflow_dto_model import CreateWorkflowDtoModel
from ..types.create_workflow_dto_nodes_item import CreateWorkflowDtoNodesItem
from ..types.edge import Edge
from ..types.workflow import Workflow
from .types.update_workflow_dto_model import UpdateWorkflowDtoModel
from .types.update_workflow_dto_nodes_item import UpdateWorkflowDtoNodesItem

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawWorkflowClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def workflow_controller_find_all(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[Workflow]]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Workflow]]

        """
        _response = self._client_wrapper.httpx_client.request(
            "workflow",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Workflow],
                    construct_type(
                        type_=typing.List[Workflow],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def workflow_controller_create(
        self,
        *,
        nodes: typing.Sequence[CreateWorkflowDtoNodesItem],
        name: str,
        edges: typing.Sequence[Edge],
        model: typing.Optional[CreateWorkflowDtoModel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Workflow]:
        """
        Parameters
        ----------
        nodes : typing.Sequence[CreateWorkflowDtoNodesItem]

        name : str

        edges : typing.Sequence[Edge]

        model : typing.Optional[CreateWorkflowDtoModel]
            These are the options for the workflow's LLM.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Workflow]

        """
        _response = self._client_wrapper.httpx_client.request(
            "workflow",
            method="POST",
            json={
                "nodes": convert_and_respect_annotation_metadata(
                    object_=nodes, annotation=typing.Sequence[CreateWorkflowDtoNodesItem], direction="write"
                ),
                "model": convert_and_respect_annotation_metadata(
                    object_=model, annotation=CreateWorkflowDtoModel, direction="write"
                ),
                "name": name,
                "edges": convert_and_respect_annotation_metadata(
                    object_=edges, annotation=typing.Sequence[Edge], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workflow,
                    construct_type(
                        type_=Workflow,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def workflow_controller_find_one(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[Workflow]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Workflow]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"workflow/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workflow,
                    construct_type(
                        type_=Workflow,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def workflow_controller_delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[Workflow]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Workflow]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"workflow/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workflow,
                    construct_type(
                        type_=Workflow,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def workflow_controller_update(
        self,
        id: str,
        *,
        nodes: typing.Optional[typing.Sequence[UpdateWorkflowDtoNodesItem]] = OMIT,
        model: typing.Optional[UpdateWorkflowDtoModel] = OMIT,
        name: typing.Optional[str] = OMIT,
        edges: typing.Optional[typing.Sequence[Edge]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Workflow]:
        """
        Parameters
        ----------
        id : str

        nodes : typing.Optional[typing.Sequence[UpdateWorkflowDtoNodesItem]]

        model : typing.Optional[UpdateWorkflowDtoModel]
            These are the options for the workflow's LLM.

        name : typing.Optional[str]

        edges : typing.Optional[typing.Sequence[Edge]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Workflow]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"workflow/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "nodes": convert_and_respect_annotation_metadata(
                    object_=nodes, annotation=typing.Sequence[UpdateWorkflowDtoNodesItem], direction="write"
                ),
                "model": convert_and_respect_annotation_metadata(
                    object_=model, annotation=UpdateWorkflowDtoModel, direction="write"
                ),
                "name": name,
                "edges": convert_and_respect_annotation_metadata(
                    object_=edges, annotation=typing.Sequence[Edge], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workflow,
                    construct_type(
                        type_=Workflow,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawWorkflowClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def workflow_controller_find_all(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[Workflow]]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Workflow]]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "workflow",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Workflow],
                    construct_type(
                        type_=typing.List[Workflow],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def workflow_controller_create(
        self,
        *,
        nodes: typing.Sequence[CreateWorkflowDtoNodesItem],
        name: str,
        edges: typing.Sequence[Edge],
        model: typing.Optional[CreateWorkflowDtoModel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Workflow]:
        """
        Parameters
        ----------
        nodes : typing.Sequence[CreateWorkflowDtoNodesItem]

        name : str

        edges : typing.Sequence[Edge]

        model : typing.Optional[CreateWorkflowDtoModel]
            These are the options for the workflow's LLM.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Workflow]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "workflow",
            method="POST",
            json={
                "nodes": convert_and_respect_annotation_metadata(
                    object_=nodes, annotation=typing.Sequence[CreateWorkflowDtoNodesItem], direction="write"
                ),
                "model": convert_and_respect_annotation_metadata(
                    object_=model, annotation=CreateWorkflowDtoModel, direction="write"
                ),
                "name": name,
                "edges": convert_and_respect_annotation_metadata(
                    object_=edges, annotation=typing.Sequence[Edge], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workflow,
                    construct_type(
                        type_=Workflow,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def workflow_controller_find_one(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Workflow]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Workflow]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"workflow/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workflow,
                    construct_type(
                        type_=Workflow,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def workflow_controller_delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Workflow]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Workflow]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"workflow/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workflow,
                    construct_type(
                        type_=Workflow,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def workflow_controller_update(
        self,
        id: str,
        *,
        nodes: typing.Optional[typing.Sequence[UpdateWorkflowDtoNodesItem]] = OMIT,
        model: typing.Optional[UpdateWorkflowDtoModel] = OMIT,
        name: typing.Optional[str] = OMIT,
        edges: typing.Optional[typing.Sequence[Edge]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Workflow]:
        """
        Parameters
        ----------
        id : str

        nodes : typing.Optional[typing.Sequence[UpdateWorkflowDtoNodesItem]]

        model : typing.Optional[UpdateWorkflowDtoModel]
            These are the options for the workflow's LLM.

        name : typing.Optional[str]

        edges : typing.Optional[typing.Sequence[Edge]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Workflow]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"workflow/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "nodes": convert_and_respect_annotation_metadata(
                    object_=nodes, annotation=typing.Sequence[UpdateWorkflowDtoNodesItem], direction="write"
                ),
                "model": convert_and_respect_annotation_metadata(
                    object_=model, annotation=UpdateWorkflowDtoModel, direction="write"
                ),
                "name": name,
                "edges": convert_and_respect_annotation_metadata(
                    object_=edges, annotation=typing.Sequence[Edge], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workflow,
                    construct_type(
                        type_=Workflow,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
