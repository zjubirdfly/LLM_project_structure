# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .test_suite_run_status import TestSuiteRunStatus
from .test_suite_run_test_result import TestSuiteRunTestResult


class TestSuiteRun(UncheckedBaseModel):
    status: TestSuiteRunStatus = pydantic.Field()
    """
    This is the current status of the test suite run.
    """

    id: str = pydantic.Field()
    """
    This is the unique identifier for the test suite run.
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    This is the unique identifier for the organization this run belongs to.
    """

    test_suite_id: typing_extensions.Annotated[str, FieldMetadata(alias="testSuiteId")] = pydantic.Field()
    """
    This is the unique identifier for the test suite this run belongs to.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the test suite run was created.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the test suite run was last updated.
    """

    test_results: typing_extensions.Annotated[
        typing.List[TestSuiteRunTestResult], FieldMetadata(alias="testResults")
    ] = pydantic.Field()
    """
    These are the results of the tests in this test suite run.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of the test suite run.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
