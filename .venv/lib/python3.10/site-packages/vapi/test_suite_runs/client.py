# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.test_suite_run import TestSuiteRun
from ..types.test_suite_runs_paginated_response import TestSuiteRunsPaginatedResponse
from .raw_client import AsyncRawTestSuiteRunsClient, RawTestSuiteRunsClient
from .types.test_suite_run_controller_find_all_paginated_request_sort_order import (
    TestSuiteRunControllerFindAllPaginatedRequestSortOrder,
)

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TestSuiteRunsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTestSuiteRunsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTestSuiteRunsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTestSuiteRunsClient
        """
        return self._raw_client

    def test_suite_run_controller_find_all_paginated(
        self,
        test_suite_id: str,
        *,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[TestSuiteRunControllerFindAllPaginatedRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestSuiteRunsPaginatedResponse:
        """
        Parameters
        ----------
        test_suite_id : str

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[TestSuiteRunControllerFindAllPaginatedRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestSuiteRunsPaginatedResponse


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.test_suite_runs.test_suite_run_controller_find_all_paginated(test_suite_id='testSuiteId', )
        """
        _response = self._raw_client.test_suite_run_controller_find_all_paginated(
            test_suite_id,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    def test_suite_run_controller_create(
        self,
        test_suite_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestSuiteRun:
        """
        Parameters
        ----------
        test_suite_id : str

        name : typing.Optional[str]
            This is the name of the test suite run.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestSuiteRun


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.test_suite_runs.test_suite_run_controller_create(test_suite_id='testSuiteId', )
        """
        _response = self._raw_client.test_suite_run_controller_create(
            test_suite_id, name=name, request_options=request_options
        )
        return _response.data

    def test_suite_run_controller_find_one(
        self, test_suite_id: str, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestSuiteRun:
        """
        Parameters
        ----------
        test_suite_id : str

        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestSuiteRun


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.test_suite_runs.test_suite_run_controller_find_one(test_suite_id='testSuiteId', id='id', )
        """
        _response = self._raw_client.test_suite_run_controller_find_one(
            test_suite_id, id, request_options=request_options
        )
        return _response.data

    def test_suite_run_controller_remove(
        self, test_suite_id: str, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestSuiteRun:
        """
        Parameters
        ----------
        test_suite_id : str

        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestSuiteRun


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.test_suite_runs.test_suite_run_controller_remove(test_suite_id='testSuiteId', id='id', )
        """
        _response = self._raw_client.test_suite_run_controller_remove(
            test_suite_id, id, request_options=request_options
        )
        return _response.data

    def test_suite_run_controller_update(
        self,
        test_suite_id: str,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestSuiteRun:
        """
        Parameters
        ----------
        test_suite_id : str

        id : str

        name : typing.Optional[str]
            This is the name of the test suite run.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestSuiteRun


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.test_suite_runs.test_suite_run_controller_update(test_suite_id='testSuiteId', id='id', )
        """
        _response = self._raw_client.test_suite_run_controller_update(
            test_suite_id, id, name=name, request_options=request_options
        )
        return _response.data


class AsyncTestSuiteRunsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTestSuiteRunsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTestSuiteRunsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTestSuiteRunsClient
        """
        return self._raw_client

    async def test_suite_run_controller_find_all_paginated(
        self,
        test_suite_id: str,
        *,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[TestSuiteRunControllerFindAllPaginatedRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestSuiteRunsPaginatedResponse:
        """
        Parameters
        ----------
        test_suite_id : str

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[TestSuiteRunControllerFindAllPaginatedRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestSuiteRunsPaginatedResponse


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.test_suite_runs.test_suite_run_controller_find_all_paginated(test_suite_id='testSuiteId', )
        asyncio.run(main())
        """
        _response = await self._raw_client.test_suite_run_controller_find_all_paginated(
            test_suite_id,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    async def test_suite_run_controller_create(
        self,
        test_suite_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestSuiteRun:
        """
        Parameters
        ----------
        test_suite_id : str

        name : typing.Optional[str]
            This is the name of the test suite run.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestSuiteRun


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.test_suite_runs.test_suite_run_controller_create(test_suite_id='testSuiteId', )
        asyncio.run(main())
        """
        _response = await self._raw_client.test_suite_run_controller_create(
            test_suite_id, name=name, request_options=request_options
        )
        return _response.data

    async def test_suite_run_controller_find_one(
        self, test_suite_id: str, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestSuiteRun:
        """
        Parameters
        ----------
        test_suite_id : str

        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestSuiteRun


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.test_suite_runs.test_suite_run_controller_find_one(test_suite_id='testSuiteId', id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.test_suite_run_controller_find_one(
            test_suite_id, id, request_options=request_options
        )
        return _response.data

    async def test_suite_run_controller_remove(
        self, test_suite_id: str, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestSuiteRun:
        """
        Parameters
        ----------
        test_suite_id : str

        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestSuiteRun


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.test_suite_runs.test_suite_run_controller_remove(test_suite_id='testSuiteId', id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.test_suite_run_controller_remove(
            test_suite_id, id, request_options=request_options
        )
        return _response.data

    async def test_suite_run_controller_update(
        self,
        test_suite_id: str,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestSuiteRun:
        """
        Parameters
        ----------
        test_suite_id : str

        id : str

        name : typing.Optional[str]
            This is the name of the test suite run.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestSuiteRun


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.test_suite_runs.test_suite_run_controller_update(test_suite_id='testSuiteId', id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.test_suite_run_controller_update(
            test_suite_id, id, name=name, request_options=request_options
        )
        return _response.data
