# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class AnalysisCostBreakdown(UncheckedBaseModel):
    summary: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the cost to summarize the call.
    """

    summary_prompt_tokens: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="summaryPromptTokens")
    ] = pydantic.Field(default=None)
    """
    This is the number of prompt tokens used to summarize the call.
    """

    summary_completion_tokens: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="summaryCompletionTokens")
    ] = pydantic.Field(default=None)
    """
    This is the number of completion tokens used to summarize the call.
    """

    structured_data: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="structuredData")] = (
        pydantic.Field(default=None)
    )
    """
    This is the cost to extract structured data from the call.
    """

    structured_data_prompt_tokens: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="structuredDataPromptTokens")
    ] = pydantic.Field(default=None)
    """
    This is the number of prompt tokens used to extract structured data from the call.
    """

    structured_data_completion_tokens: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="structuredDataCompletionTokens")
    ] = pydantic.Field(default=None)
    """
    This is the number of completion tokens used to extract structured data from the call.
    """

    success_evaluation: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="successEvaluation")
    ] = pydantic.Field(default=None)
    """
    This is the cost to evaluate if the call was successful.
    """

    success_evaluation_prompt_tokens: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="successEvaluationPromptTokens")
    ] = pydantic.Field(default=None)
    """
    This is the number of prompt tokens used to evaluate if the call was successful.
    """

    success_evaluation_completion_tokens: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="successEvaluationCompletionTokens")
    ] = pydantic.Field(default=None)
    """
    This is the number of completion tokens used to evaluate if the call was successful.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
