# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .sip_trunk_gateway_outbound_protocol import SipTrunkGatewayOutboundProtocol


class SipTrunkGateway(UncheckedBaseModel):
    ip: str = pydantic.Field()
    """
    This is the address of the gateway. It can be an IPv4 address like 1.1.1.1 or a fully qualified domain name like my-sip-trunk.pstn.twilio.com.
    """

    port: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the port number of the gateway. Default is 5060.
    
    @default 5060
    """

    netmask: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the netmask of the gateway. Defaults to 32.
    
    @default 32
    """

    inbound_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="inboundEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This is whether inbound calls are allowed from this gateway. Default is true.
    
    @default true
    """

    outbound_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="outboundEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This is whether outbound calls should be sent to this gateway. Default is true.
    
    Note, if netmask is less than 32, it doesn't affect the outbound IPs that are tried. 1 attempt is made to `ip:port`.
    
    @default true
    """

    outbound_protocol: typing_extensions.Annotated[
        typing.Optional[SipTrunkGatewayOutboundProtocol], FieldMetadata(alias="outboundProtocol")
    ] = pydantic.Field(default=None)
    """
    This is the protocol to use for SIP signaling outbound calls. Default is udp.
    
    @default udp
    """

    options_ping_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="optionsPingEnabled")
    ] = pydantic.Field(default=None)
    """
    This is whether to send options ping to the gateway. This can be used to check if the gateway is reachable. Default is false.
    
    This is useful for high availability setups where you want to check if the gateway is reachable before routing calls to it. Note, if no gateway for a trunk is reachable, outbound calls will be rejected.
    
    @default false
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
