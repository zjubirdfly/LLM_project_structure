# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .assistant_overrides import AssistantOverrides
from .create_assistant_dto import CreateAssistantDto
from .transfer_destination_assistant import TransferDestinationAssistant


class SquadMemberDto(UncheckedBaseModel):
    assistant_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.
    """

    assistant: typing.Optional[CreateAssistantDto] = pydantic.Field(default=None)
    """
    This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.
    """

    assistant_overrides: typing_extensions.Annotated[
        typing.Optional[AssistantOverrides], FieldMetadata(alias="assistantOverrides")
    ] = pydantic.Field(default=None)
    """
    This can be used to override the assistant's settings and provide values for it's template variables.
    """

    assistant_destinations: typing_extensions.Annotated[
        typing.Optional[typing.List[TransferDestinationAssistant]], FieldMetadata(alias="assistantDestinations")
    ] = pydantic.Field(default=None)
    """
    These are the others assistants that this assistant can transfer to.
    
    If the assistant already has transfer call tool, these destinations are just appended to existing ones.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
