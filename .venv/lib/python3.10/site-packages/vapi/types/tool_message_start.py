# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .condition import Condition
from .text_content import TextContent


class ToolMessageStart(UncheckedBaseModel):
    contents: typing.Optional[typing.List[TextContent]] = pydantic.Field(default=None)
    """
    This is an alternative to the `content` property. It allows to specify variants of the same content, one per language.
    
    Usage:
    - If your assistants are multilingual, you can provide content for each language.
    - If you don't provide content for a language, the first item in the array will be automatically translated to the active language at that moment.
    
    This will override the `content` property.
    """

    type: typing.Literal["request-start"] = pydantic.Field(default="request-start")
    """
    This message is triggered when the tool call starts.
    
    This message is never triggered for async tools.
    
    If this message is not provided, one of the default filler messages "Hold on a sec", "One moment", "Just a sec", "Give me a moment" or "This'll just take a sec" will be used.
    """

    blocking: typing.Optional[bool] = pydantic.Field(default=None)
    """
    This is an optional boolean that if true, the tool call will only trigger after the message is spoken. Default is false.
    
    @default false
    """

    content: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the content that the assistant says when this message is triggered.
    """

    conditions: typing.Optional[typing.List[Condition]] = pydantic.Field(default=None)
    """
    This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
