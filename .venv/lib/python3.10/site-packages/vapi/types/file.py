# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .file_status import FileStatus


class File(UncheckedBaseModel):
    object: typing.Optional[typing.Literal["file"]] = None
    status: typing.Optional[FileStatus] = None
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of the file. This is just for your own reference.
    """

    original_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="originalName")] = None
    bytes: typing.Optional[float] = None
    purpose: typing.Optional[str] = None
    mimetype: typing.Optional[str] = None
    key: typing.Optional[str] = None
    path: typing.Optional[str] = None
    bucket: typing.Optional[str] = None
    url: typing.Optional[str] = None
    parsed_text_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="parsedTextUrl")] = None
    parsed_text_bytes: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="parsedTextBytes")] = (
        None
    )
    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    id: str = pydantic.Field()
    """
    This is the unique identifier for the file.
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    This is the unique identifier for the org that this file belongs to.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the file was created.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the file was last updated.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
