# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class Metrics(UncheckedBaseModel):
    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")]
    range_start: typing_extensions.Annotated[str, FieldMetadata(alias="rangeStart")]
    range_end: typing_extensions.Annotated[str, FieldMetadata(alias="rangeEnd")]
    bill: float
    bill_within_billing_limit: typing_extensions.Annotated[bool, FieldMetadata(alias="billWithinBillingLimit")]
    bill_daily_breakdown: typing_extensions.Annotated[
        typing.Dict[str, typing.Optional[typing.Any]], FieldMetadata(alias="billDailyBreakdown")
    ]
    call_active: typing_extensions.Annotated[float, FieldMetadata(alias="callActive")]
    call_active_within_concurrency_limit: typing_extensions.Annotated[
        bool, FieldMetadata(alias="callActiveWithinConcurrencyLimit")
    ]
    call_minutes: typing_extensions.Annotated[float, FieldMetadata(alias="callMinutes")]
    call_minutes_daily_breakdown: typing_extensions.Annotated[
        typing.Dict[str, typing.Optional[typing.Any]], FieldMetadata(alias="callMinutesDailyBreakdown")
    ]
    call_minutes_average: typing_extensions.Annotated[float, FieldMetadata(alias="callMinutesAverage")]
    call_minutes_average_daily_breakdown: typing_extensions.Annotated[
        typing.Dict[str, typing.Optional[typing.Any]], FieldMetadata(alias="callMinutesAverageDailyBreakdown")
    ]
    call_count: typing_extensions.Annotated[float, FieldMetadata(alias="callCount")]
    call_count_daily_breakdown: typing_extensions.Annotated[
        typing.Dict[str, typing.Optional[typing.Any]], FieldMetadata(alias="callCountDailyBreakdown")
    ]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
