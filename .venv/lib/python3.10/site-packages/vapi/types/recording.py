# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .mono import Mono


class Recording(UncheckedBaseModel):
    stereo_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="stereoUrl")] = pydantic.Field(
        default=None
    )
    """
    This is the stereo recording url for the call. To enable, set `assistant.artifactPlan.recordingEnabled`.
    """

    video_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="videoUrl")] = pydantic.Field(
        default=None
    )
    """
    This is the video recording url for the call. To enable, set `assistant.artifactPlan.videoRecordingEnabled`.
    """

    video_recording_start_delay_seconds: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="videoRecordingStartDelaySeconds")
    ] = pydantic.Field(default=None)
    """
    This is video recording start delay in ms. To enable, set `assistant.artifactPlan.videoRecordingEnabled`. This can be used to align the playback of the recording with artifact.messages timestamps.
    """

    mono: typing.Optional[Mono] = pydantic.Field(default=None)
    """
    This is the mono recording url for the call. To enable, set `assistant.artifactPlan.recordingEnabled`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
