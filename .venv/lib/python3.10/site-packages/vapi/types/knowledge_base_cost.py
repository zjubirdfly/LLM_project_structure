# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class KnowledgeBaseCost(UncheckedBaseModel):
    type: typing.Literal["knowledge-base"] = pydantic.Field(default="knowledge-base")
    """
    This is the type of cost, always 'knowledge-base' for this class.
    """

    model: typing.Dict[str, typing.Optional[typing.Any]] = pydantic.Field()
    """
    This is the model that was used for processing the knowledge base.
    """

    prompt_tokens: typing_extensions.Annotated[float, FieldMetadata(alias="promptTokens")] = pydantic.Field()
    """
    This is the number of prompt tokens used in the knowledge base query.
    """

    completion_tokens: typing_extensions.Annotated[float, FieldMetadata(alias="completionTokens")] = pydantic.Field()
    """
    This is the number of completion tokens generated in the knowledge base query.
    """

    cost: float = pydantic.Field()
    """
    This is the cost of the component in USD.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
