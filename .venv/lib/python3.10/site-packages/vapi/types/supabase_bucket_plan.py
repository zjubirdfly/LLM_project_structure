# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .supabase_bucket_plan_region import SupabaseBucketPlanRegion


class SupabaseBucketPlan(UncheckedBaseModel):
    region: SupabaseBucketPlanRegion = pydantic.Field()
    """
    This is the S3 Region. It should look like us-east-1
    It should be one of the supabase regions defined in the SUPABASE_REGION enum
    Check https://supabase.com/docs/guides/platform/regions for up to date regions
    """

    url: str = pydantic.Field()
    """
    This is the S3 compatible URL for Supabase S3
    This should look like https://<project-ID>.supabase.co/storage/v1/s3
    """

    access_key_id: typing_extensions.Annotated[str, FieldMetadata(alias="accessKeyId")] = pydantic.Field()
    """
    This is the Supabase S3 Access Key ID.
    The user creates this in the Supabase project Storage settings
    """

    secret_access_key: typing_extensions.Annotated[str, FieldMetadata(alias="secretAccessKey")] = pydantic.Field()
    """
    This is the Supabase S3 Secret Access Key.
    The user creates this in the Supabase project Storage settings along with the access key id
    """

    name: str = pydantic.Field()
    """
    This is the Supabase S3 Bucket Name.
    The user must create this in Supabase under Storage > Buckets
    A bucket that does not exist will not be checked now, but file uploads will fail
    """

    path: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the Supabase S3 Bucket Folder Path.
    The user can create this in Supabase under Storage > Buckets
    A path that does not exist will not be checked now, but file uploads will fail
    A Path is like a folder in the bucket
    Eg. If the bucket is called "my-bucket" and the path is "my-folder", the full path is "my-bucket/my-folder"
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
