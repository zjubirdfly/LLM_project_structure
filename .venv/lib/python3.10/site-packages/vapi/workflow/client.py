# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.create_workflow_dto_model import CreateWorkflowDtoModel
from ..types.create_workflow_dto_nodes_item import CreateWorkflowDtoNodesItem
from ..types.edge import Edge
from ..types.workflow import Workflow
from .raw_client import AsyncRawWorkflowClient, RawWorkflowClient
from .types.update_workflow_dto_model import UpdateWorkflowDtoModel
from .types.update_workflow_dto_nodes_item import UpdateWorkflowDtoNodesItem

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WorkflowClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawWorkflowClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawWorkflowClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawWorkflowClient
        """
        return self._raw_client

    def workflow_controller_find_all(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Workflow]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Workflow]


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.workflow.workflow_controller_find_all()
        """
        _response = self._raw_client.workflow_controller_find_all(request_options=request_options)
        return _response.data

    def workflow_controller_create(
        self,
        *,
        nodes: typing.Sequence[CreateWorkflowDtoNodesItem],
        name: str,
        edges: typing.Sequence[Edge],
        model: typing.Optional[CreateWorkflowDtoModel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Workflow:
        """
        Parameters
        ----------
        nodes : typing.Sequence[CreateWorkflowDtoNodesItem]

        name : str

        edges : typing.Sequence[Edge]

        model : typing.Optional[CreateWorkflowDtoModel]
            These are the options for the workflow's LLM.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workflow


        Examples
        --------
        from vapi import Vapi
        from vapi import ConversationNode
        from vapi import Edge
        client = Vapi(token="YOUR_TOKEN", )
        client.workflow.workflow_controller_create(nodes=[ConversationNode(name='name', )], name='name', edges=[Edge(from_='from', to='to', )], )
        """
        _response = self._raw_client.workflow_controller_create(
            nodes=nodes, name=name, edges=edges, model=model, request_options=request_options
        )
        return _response.data

    def workflow_controller_find_one(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Workflow:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workflow


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.workflow.workflow_controller_find_one(id='id', )
        """
        _response = self._raw_client.workflow_controller_find_one(id, request_options=request_options)
        return _response.data

    def workflow_controller_delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Workflow:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workflow


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.workflow.workflow_controller_delete(id='id', )
        """
        _response = self._raw_client.workflow_controller_delete(id, request_options=request_options)
        return _response.data

    def workflow_controller_update(
        self,
        id: str,
        *,
        nodes: typing.Optional[typing.Sequence[UpdateWorkflowDtoNodesItem]] = OMIT,
        model: typing.Optional[UpdateWorkflowDtoModel] = OMIT,
        name: typing.Optional[str] = OMIT,
        edges: typing.Optional[typing.Sequence[Edge]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Workflow:
        """
        Parameters
        ----------
        id : str

        nodes : typing.Optional[typing.Sequence[UpdateWorkflowDtoNodesItem]]

        model : typing.Optional[UpdateWorkflowDtoModel]
            These are the options for the workflow's LLM.

        name : typing.Optional[str]

        edges : typing.Optional[typing.Sequence[Edge]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workflow


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.workflow.workflow_controller_update(id='id', )
        """
        _response = self._raw_client.workflow_controller_update(
            id, nodes=nodes, model=model, name=name, edges=edges, request_options=request_options
        )
        return _response.data


class AsyncWorkflowClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawWorkflowClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawWorkflowClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawWorkflowClient
        """
        return self._raw_client

    async def workflow_controller_find_all(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Workflow]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Workflow]


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.workflow.workflow_controller_find_all()
        asyncio.run(main())
        """
        _response = await self._raw_client.workflow_controller_find_all(request_options=request_options)
        return _response.data

    async def workflow_controller_create(
        self,
        *,
        nodes: typing.Sequence[CreateWorkflowDtoNodesItem],
        name: str,
        edges: typing.Sequence[Edge],
        model: typing.Optional[CreateWorkflowDtoModel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Workflow:
        """
        Parameters
        ----------
        nodes : typing.Sequence[CreateWorkflowDtoNodesItem]

        name : str

        edges : typing.Sequence[Edge]

        model : typing.Optional[CreateWorkflowDtoModel]
            These are the options for the workflow's LLM.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workflow


        Examples
        --------
        from vapi import AsyncVapi
        from vapi import ConversationNode
        from vapi import Edge
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.workflow.workflow_controller_create(nodes=[ConversationNode(name='name', )], name='name', edges=[Edge(from_='from', to='to', )], )
        asyncio.run(main())
        """
        _response = await self._raw_client.workflow_controller_create(
            nodes=nodes, name=name, edges=edges, model=model, request_options=request_options
        )
        return _response.data

    async def workflow_controller_find_one(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Workflow:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workflow


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.workflow.workflow_controller_find_one(id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.workflow_controller_find_one(id, request_options=request_options)
        return _response.data

    async def workflow_controller_delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Workflow:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workflow


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.workflow.workflow_controller_delete(id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.workflow_controller_delete(id, request_options=request_options)
        return _response.data

    async def workflow_controller_update(
        self,
        id: str,
        *,
        nodes: typing.Optional[typing.Sequence[UpdateWorkflowDtoNodesItem]] = OMIT,
        model: typing.Optional[UpdateWorkflowDtoModel] = OMIT,
        name: typing.Optional[str] = OMIT,
        edges: typing.Optional[typing.Sequence[Edge]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Workflow:
        """
        Parameters
        ----------
        id : str

        nodes : typing.Optional[typing.Sequence[UpdateWorkflowDtoNodesItem]]

        model : typing.Optional[UpdateWorkflowDtoModel]
            These are the options for the workflow's LLM.

        name : typing.Optional[str]

        edges : typing.Optional[typing.Sequence[Edge]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workflow


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.workflow.workflow_controller_update(id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.workflow_controller_update(
            id, nodes=nodes, model=model, name=name, edges=edges, request_options=request_options
        )
        return _response.data
