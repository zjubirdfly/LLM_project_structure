# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .create_tool_template_dto_details import CreateToolTemplateDtoDetails
from .create_tool_template_dto_provider import CreateToolTemplateDtoProvider
from .create_tool_template_dto_provider_details import CreateToolTemplateDtoProviderDetails
from .create_tool_template_dto_visibility import CreateToolTemplateDtoVisibility
from .tool_template_metadata import ToolTemplateMetadata


class CreateToolTemplateDto(UncheckedBaseModel):
    details: typing.Optional[CreateToolTemplateDtoDetails] = None
    provider_details: typing_extensions.Annotated[
        typing.Optional[CreateToolTemplateDtoProviderDetails], FieldMetadata(alias="providerDetails")
    ] = None
    metadata: typing.Optional[ToolTemplateMetadata] = None
    visibility: typing.Optional[CreateToolTemplateDtoVisibility] = None
    type: typing.Literal["tool"] = "tool"
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name of the template. This is just for your own reference.
    """

    provider: typing.Optional[CreateToolTemplateDtoProvider] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
