# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.assistant_overrides import AssistantOverrides
from ..types.squad import Squad
from ..types.squad_member_dto import SquadMemberDto
from .raw_client import AsyncRawSquadsClient, RawSquadsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SquadsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSquadsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSquadsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSquadsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Squad]:
        """
        Parameters
        ----------
        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Squad]


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.squads.list()
        """
        _response = self._raw_client.list(
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    def create(
        self,
        *,
        members: typing.Sequence[SquadMemberDto],
        name: typing.Optional[str] = OMIT,
        members_overrides: typing.Optional[AssistantOverrides] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Squad:
        """
        Parameters
        ----------
        members : typing.Sequence[SquadMemberDto]
            This is the list of assistants that make up the squad.

            The call will start with the first assistant in the list.

        name : typing.Optional[str]
            This is the name of the squad.

        members_overrides : typing.Optional[AssistantOverrides]
            This can be used to override all the assistants' settings and provide values for their template variables.

            Both `membersOverrides` and `members[n].assistantOverrides` can be used together. First, `members[n].assistantOverrides` is applied. Then, `membersOverrides` is applied as a global override.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Squad


        Examples
        --------
        from vapi import Vapi
        from vapi import SquadMemberDto
        client = Vapi(token="YOUR_TOKEN", )
        client.squads.create(members=[SquadMemberDto()], )
        """
        _response = self._raw_client.create(
            members=members, name=name, members_overrides=members_overrides, request_options=request_options
        )
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Squad:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Squad


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.squads.get(id='id', )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Squad:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Squad


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.squads.delete(id='id', )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data

    def update(
        self,
        id: str,
        *,
        members: typing.Sequence[SquadMemberDto],
        name: typing.Optional[str] = OMIT,
        members_overrides: typing.Optional[AssistantOverrides] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Squad:
        """
        Parameters
        ----------
        id : str

        members : typing.Sequence[SquadMemberDto]
            This is the list of assistants that make up the squad.

            The call will start with the first assistant in the list.

        name : typing.Optional[str]
            This is the name of the squad.

        members_overrides : typing.Optional[AssistantOverrides]
            This can be used to override all the assistants' settings and provide values for their template variables.

            Both `membersOverrides` and `members[n].assistantOverrides` can be used together. First, `members[n].assistantOverrides` is applied. Then, `membersOverrides` is applied as a global override.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Squad


        Examples
        --------
        from vapi import Vapi
        from vapi import SquadMemberDto
        client = Vapi(token="YOUR_TOKEN", )
        client.squads.update(id='id', members=[SquadMemberDto()], )
        """
        _response = self._raw_client.update(
            id, members=members, name=name, members_overrides=members_overrides, request_options=request_options
        )
        return _response.data


class AsyncSquadsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSquadsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSquadsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSquadsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Squad]:
        """
        Parameters
        ----------
        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Squad]


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.squads.list()
        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self,
        *,
        members: typing.Sequence[SquadMemberDto],
        name: typing.Optional[str] = OMIT,
        members_overrides: typing.Optional[AssistantOverrides] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Squad:
        """
        Parameters
        ----------
        members : typing.Sequence[SquadMemberDto]
            This is the list of assistants that make up the squad.

            The call will start with the first assistant in the list.

        name : typing.Optional[str]
            This is the name of the squad.

        members_overrides : typing.Optional[AssistantOverrides]
            This can be used to override all the assistants' settings and provide values for their template variables.

            Both `membersOverrides` and `members[n].assistantOverrides` can be used together. First, `members[n].assistantOverrides` is applied. Then, `membersOverrides` is applied as a global override.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Squad


        Examples
        --------
        from vapi import AsyncVapi
        from vapi import SquadMemberDto
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.squads.create(members=[SquadMemberDto()], )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            members=members, name=name, members_overrides=members_overrides, request_options=request_options
        )
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Squad:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Squad


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.squads.get(id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Squad:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Squad


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.squads.delete(id='id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data

    async def update(
        self,
        id: str,
        *,
        members: typing.Sequence[SquadMemberDto],
        name: typing.Optional[str] = OMIT,
        members_overrides: typing.Optional[AssistantOverrides] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Squad:
        """
        Parameters
        ----------
        id : str

        members : typing.Sequence[SquadMemberDto]
            This is the list of assistants that make up the squad.

            The call will start with the first assistant in the list.

        name : typing.Optional[str]
            This is the name of the squad.

        members_overrides : typing.Optional[AssistantOverrides]
            This can be used to override all the assistants' settings and provide values for their template variables.

            Both `membersOverrides` and `members[n].assistantOverrides` can be used together. First, `members[n].assistantOverrides` is applied. Then, `membersOverrides` is applied as a global override.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Squad


        Examples
        --------
        from vapi import AsyncVapi
        from vapi import SquadMemberDto
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.squads.update(id='id', members=[SquadMemberDto()], )
        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            id, members=members, name=name, members_overrides=members_overrides, request_options=request_options
        )
        return _response.data
