# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..types.log import Log
from .raw_client import AsyncRawLogsClient, RawLogsClient
from .types.logging_controller_logs_delete_query_request_type import LoggingControllerLogsDeleteQueryRequestType
from .types.logs_get_request_sort_order import LogsGetRequestSortOrder
from .types.logs_get_request_type import LogsGetRequestType


class LogsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawLogsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawLogsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawLogsClient
        """
        return self._raw_client

    def get(
        self,
        *,
        type: typing.Optional[LogsGetRequestType] = None,
        webhook_type: typing.Optional[str] = None,
        assistant_id: typing.Optional[str] = None,
        phone_number_id: typing.Optional[str] = None,
        customer_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        call_id: typing.Optional[str] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[LogsGetRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[Log]:
        """
        Parameters
        ----------
        type : typing.Optional[LogsGetRequestType]
            This is the type of the log.

        webhook_type : typing.Optional[str]
            This is the type of the webhook, given the log is from a webhook.

        assistant_id : typing.Optional[str]
            This is the ID of the assistant.

        phone_number_id : typing.Optional[str]
            This is the ID of the phone number.

        customer_id : typing.Optional[str]
            This is the ID of the customer.

        squad_id : typing.Optional[str]
            This is the ID of the squad.

        call_id : typing.Optional[str]
            This is the ID of the call.

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[LogsGetRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[Log]


        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        response = client.logs.get()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        return self._raw_client.get(
            type=type,
            webhook_type=webhook_type,
            assistant_id=assistant_id,
            phone_number_id=phone_number_id,
            customer_id=customer_id,
            squad_id=squad_id,
            call_id=call_id,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )

    def logging_controller_logs_delete_query(
        self,
        *,
        type: typing.Optional[LoggingControllerLogsDeleteQueryRequestType] = None,
        assistant_id: typing.Optional[str] = None,
        phone_number_id: typing.Optional[str] = None,
        customer_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        call_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        type : typing.Optional[LoggingControllerLogsDeleteQueryRequestType]
            This is the type of the log.

        assistant_id : typing.Optional[str]

        phone_number_id : typing.Optional[str]
            This is the ID of the phone number.

        customer_id : typing.Optional[str]
            This is the ID of the customer.

        squad_id : typing.Optional[str]
            This is the ID of the squad.

        call_id : typing.Optional[str]
            This is the ID of the call.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from vapi import Vapi
        client = Vapi(token="YOUR_TOKEN", )
        client.logs.logging_controller_logs_delete_query()
        """
        _response = self._raw_client.logging_controller_logs_delete_query(
            type=type,
            assistant_id=assistant_id,
            phone_number_id=phone_number_id,
            customer_id=customer_id,
            squad_id=squad_id,
            call_id=call_id,
            request_options=request_options,
        )
        return _response.data


class AsyncLogsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawLogsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawLogsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawLogsClient
        """
        return self._raw_client

    async def get(
        self,
        *,
        type: typing.Optional[LogsGetRequestType] = None,
        webhook_type: typing.Optional[str] = None,
        assistant_id: typing.Optional[str] = None,
        phone_number_id: typing.Optional[str] = None,
        customer_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        call_id: typing.Optional[str] = None,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[LogsGetRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[Log]:
        """
        Parameters
        ----------
        type : typing.Optional[LogsGetRequestType]
            This is the type of the log.

        webhook_type : typing.Optional[str]
            This is the type of the webhook, given the log is from a webhook.

        assistant_id : typing.Optional[str]
            This is the ID of the assistant.

        phone_number_id : typing.Optional[str]
            This is the ID of the phone number.

        customer_id : typing.Optional[str]
            This is the ID of the customer.

        squad_id : typing.Optional[str]
            This is the ID of the squad.

        call_id : typing.Optional[str]
            This is the ID of the call.

        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[LogsGetRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[Log]


        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            response = await client.logs.get()
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page
        asyncio.run(main())
        """
        return await self._raw_client.get(
            type=type,
            webhook_type=webhook_type,
            assistant_id=assistant_id,
            phone_number_id=phone_number_id,
            customer_id=customer_id,
            squad_id=squad_id,
            call_id=call_id,
            page=page,
            sort_order=sort_order,
            limit=limit,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_ge=created_at_ge,
            created_at_le=created_at_le,
            updated_at_gt=updated_at_gt,
            updated_at_lt=updated_at_lt,
            updated_at_ge=updated_at_ge,
            updated_at_le=updated_at_le,
            request_options=request_options,
        )

    async def logging_controller_logs_delete_query(
        self,
        *,
        type: typing.Optional[LoggingControllerLogsDeleteQueryRequestType] = None,
        assistant_id: typing.Optional[str] = None,
        phone_number_id: typing.Optional[str] = None,
        customer_id: typing.Optional[str] = None,
        squad_id: typing.Optional[str] = None,
        call_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        type : typing.Optional[LoggingControllerLogsDeleteQueryRequestType]
            This is the type of the log.

        assistant_id : typing.Optional[str]

        phone_number_id : typing.Optional[str]
            This is the ID of the phone number.

        customer_id : typing.Optional[str]
            This is the ID of the customer.

        squad_id : typing.Optional[str]
            This is the ID of the squad.

        call_id : typing.Optional[str]
            This is the ID of the call.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from vapi import AsyncVapi
        import asyncio
        client = AsyncVapi(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.logs.logging_controller_logs_delete_query()
        asyncio.run(main())
        """
        _response = await self._raw_client.logging_controller_logs_delete_query(
            type=type,
            assistant_id=assistant_id,
            phone_number_id=phone_number_id,
            customer_id=customer_id,
            squad_id=squad_id,
            call_id=call_id,
            request_options=request_options,
        )
        return _response.data
