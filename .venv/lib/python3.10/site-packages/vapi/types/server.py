# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .backoff_plan import BackoffPlan


class Server(UncheckedBaseModel):
    timeout_seconds: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="timeoutSeconds")] = (
        pydantic.Field(default=None)
    )
    """
    This is the timeout in seconds for the request. Defaults to 20 seconds.
    
    @default 20
    """

    url: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is where the request will be sent.
    """

    headers: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    These are the headers to include in the request.
    
    Each key-value pair represents a header name and its value.
    """

    backoff_plan: typing_extensions.Annotated[typing.Optional[BackoffPlan], FieldMetadata(alias="backoffPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the backoff plan if the request fails. Defaults to undefined (the request will not be retried).
    
    @default undefined (the request will not be retried)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
