# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.datetime_utils import serialize_datetime
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..types.target_plan import TargetPlan
from ..types.test_suite import TestSuite
from ..types.test_suites_paginated_response import TestSuitesPaginatedResponse
from ..types.tester_plan import TesterPlan
from .types.test_suite_controller_find_all_paginated_request_sort_order import (
    TestSuiteControllerFindAllPaginatedRequestSortOrder,
)

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawTestSuitesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def test_suite_controller_find_all_paginated(
        self,
        *,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[TestSuiteControllerFindAllPaginatedRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[TestSuitesPaginatedResponse]:
        """
        Parameters
        ----------
        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[TestSuiteControllerFindAllPaginatedRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TestSuitesPaginatedResponse]

        """
        _response = self._client_wrapper.httpx_client.request(
            "test-suite",
            method="GET",
            params={
                "page": page,
                "sortOrder": sort_order,
                "limit": limit,
                "createdAtGt": serialize_datetime(created_at_gt) if created_at_gt is not None else None,
                "createdAtLt": serialize_datetime(created_at_lt) if created_at_lt is not None else None,
                "createdAtGe": serialize_datetime(created_at_ge) if created_at_ge is not None else None,
                "createdAtLe": serialize_datetime(created_at_le) if created_at_le is not None else None,
                "updatedAtGt": serialize_datetime(updated_at_gt) if updated_at_gt is not None else None,
                "updatedAtLt": serialize_datetime(updated_at_lt) if updated_at_lt is not None else None,
                "updatedAtGe": serialize_datetime(updated_at_ge) if updated_at_ge is not None else None,
                "updatedAtLe": serialize_datetime(updated_at_le) if updated_at_le is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TestSuitesPaginatedResponse,
                    construct_type(
                        type_=TestSuitesPaginatedResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def test_suite_controller_create(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        phone_number_id: typing.Optional[str] = OMIT,
        tester_plan: typing.Optional[TesterPlan] = OMIT,
        target_plan: typing.Optional[TargetPlan] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[TestSuite]:
        """
        Parameters
        ----------
        name : typing.Optional[str]
            This is the name of the test suite.

        phone_number_id : typing.Optional[str]
            This is the phone number ID associated with this test suite.

        tester_plan : typing.Optional[TesterPlan]
            Override the default tester plan by providing custom assistant configuration for the test agent.

            We recommend only using this if you are confident, as we have already set sensible defaults on the tester plan.

        target_plan : typing.Optional[TargetPlan]
            These are the configuration for the assistant / phone number that is being tested.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TestSuite]

        """
        _response = self._client_wrapper.httpx_client.request(
            "test-suite",
            method="POST",
            json={
                "name": name,
                "phoneNumberId": phone_number_id,
                "testerPlan": convert_and_respect_annotation_metadata(
                    object_=tester_plan, annotation=TesterPlan, direction="write"
                ),
                "targetPlan": convert_and_respect_annotation_metadata(
                    object_=target_plan, annotation=TargetPlan, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TestSuite,
                    construct_type(
                        type_=TestSuite,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def test_suite_controller_find_one(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[TestSuite]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TestSuite]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"test-suite/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TestSuite,
                    construct_type(
                        type_=TestSuite,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def test_suite_controller_remove(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[TestSuite]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TestSuite]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"test-suite/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TestSuite,
                    construct_type(
                        type_=TestSuite,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def test_suite_controller_update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        phone_number_id: typing.Optional[str] = OMIT,
        tester_plan: typing.Optional[TesterPlan] = OMIT,
        target_plan: typing.Optional[TargetPlan] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[TestSuite]:
        """
        Parameters
        ----------
        id : str

        name : typing.Optional[str]
            This is the name of the test suite.

        phone_number_id : typing.Optional[str]
            This is the phone number ID associated with this test suite.

        tester_plan : typing.Optional[TesterPlan]
            Override the default tester plan by providing custom assistant configuration for the test agent.

            We recommend only using this if you are confident, as we have already set sensible defaults on the tester plan.

        target_plan : typing.Optional[TargetPlan]
            These are the configuration for the assistant / phone number that is being tested.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TestSuite]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"test-suite/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "name": name,
                "phoneNumberId": phone_number_id,
                "testerPlan": convert_and_respect_annotation_metadata(
                    object_=tester_plan, annotation=TesterPlan, direction="write"
                ),
                "targetPlan": convert_and_respect_annotation_metadata(
                    object_=target_plan, annotation=TargetPlan, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TestSuite,
                    construct_type(
                        type_=TestSuite,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawTestSuitesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def test_suite_controller_find_all_paginated(
        self,
        *,
        page: typing.Optional[float] = None,
        sort_order: typing.Optional[TestSuiteControllerFindAllPaginatedRequestSortOrder] = None,
        limit: typing.Optional[float] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_ge: typing.Optional[dt.datetime] = None,
        created_at_le: typing.Optional[dt.datetime] = None,
        updated_at_gt: typing.Optional[dt.datetime] = None,
        updated_at_lt: typing.Optional[dt.datetime] = None,
        updated_at_ge: typing.Optional[dt.datetime] = None,
        updated_at_le: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[TestSuitesPaginatedResponse]:
        """
        Parameters
        ----------
        page : typing.Optional[float]
            This is the page number to return. Defaults to 1.

        sort_order : typing.Optional[TestSuiteControllerFindAllPaginatedRequestSortOrder]
            This is the sort order for pagination. Defaults to 'DESC'.

        limit : typing.Optional[float]
            This is the maximum number of items to return. Defaults to 100.

        created_at_gt : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than the specified value.

        created_at_lt : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than the specified value.

        created_at_ge : typing.Optional[dt.datetime]
            This will return items where the createdAt is greater than or equal to the specified value.

        created_at_le : typing.Optional[dt.datetime]
            This will return items where the createdAt is less than or equal to the specified value.

        updated_at_gt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than the specified value.

        updated_at_lt : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than the specified value.

        updated_at_ge : typing.Optional[dt.datetime]
            This will return items where the updatedAt is greater than or equal to the specified value.

        updated_at_le : typing.Optional[dt.datetime]
            This will return items where the updatedAt is less than or equal to the specified value.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TestSuitesPaginatedResponse]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "test-suite",
            method="GET",
            params={
                "page": page,
                "sortOrder": sort_order,
                "limit": limit,
                "createdAtGt": serialize_datetime(created_at_gt) if created_at_gt is not None else None,
                "createdAtLt": serialize_datetime(created_at_lt) if created_at_lt is not None else None,
                "createdAtGe": serialize_datetime(created_at_ge) if created_at_ge is not None else None,
                "createdAtLe": serialize_datetime(created_at_le) if created_at_le is not None else None,
                "updatedAtGt": serialize_datetime(updated_at_gt) if updated_at_gt is not None else None,
                "updatedAtLt": serialize_datetime(updated_at_lt) if updated_at_lt is not None else None,
                "updatedAtGe": serialize_datetime(updated_at_ge) if updated_at_ge is not None else None,
                "updatedAtLe": serialize_datetime(updated_at_le) if updated_at_le is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TestSuitesPaginatedResponse,
                    construct_type(
                        type_=TestSuitesPaginatedResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def test_suite_controller_create(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        phone_number_id: typing.Optional[str] = OMIT,
        tester_plan: typing.Optional[TesterPlan] = OMIT,
        target_plan: typing.Optional[TargetPlan] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[TestSuite]:
        """
        Parameters
        ----------
        name : typing.Optional[str]
            This is the name of the test suite.

        phone_number_id : typing.Optional[str]
            This is the phone number ID associated with this test suite.

        tester_plan : typing.Optional[TesterPlan]
            Override the default tester plan by providing custom assistant configuration for the test agent.

            We recommend only using this if you are confident, as we have already set sensible defaults on the tester plan.

        target_plan : typing.Optional[TargetPlan]
            These are the configuration for the assistant / phone number that is being tested.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TestSuite]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "test-suite",
            method="POST",
            json={
                "name": name,
                "phoneNumberId": phone_number_id,
                "testerPlan": convert_and_respect_annotation_metadata(
                    object_=tester_plan, annotation=TesterPlan, direction="write"
                ),
                "targetPlan": convert_and_respect_annotation_metadata(
                    object_=target_plan, annotation=TargetPlan, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TestSuite,
                    construct_type(
                        type_=TestSuite,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def test_suite_controller_find_one(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[TestSuite]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TestSuite]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"test-suite/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TestSuite,
                    construct_type(
                        type_=TestSuite,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def test_suite_controller_remove(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[TestSuite]:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TestSuite]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"test-suite/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TestSuite,
                    construct_type(
                        type_=TestSuite,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def test_suite_controller_update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        phone_number_id: typing.Optional[str] = OMIT,
        tester_plan: typing.Optional[TesterPlan] = OMIT,
        target_plan: typing.Optional[TargetPlan] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[TestSuite]:
        """
        Parameters
        ----------
        id : str

        name : typing.Optional[str]
            This is the name of the test suite.

        phone_number_id : typing.Optional[str]
            This is the phone number ID associated with this test suite.

        tester_plan : typing.Optional[TesterPlan]
            Override the default tester plan by providing custom assistant configuration for the test agent.

            We recommend only using this if you are confident, as we have already set sensible defaults on the tester plan.

        target_plan : typing.Optional[TargetPlan]
            These are the configuration for the assistant / phone number that is being tested.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TestSuite]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"test-suite/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "name": name,
                "phoneNumberId": phone_number_id,
                "testerPlan": convert_and_respect_annotation_metadata(
                    object_=tester_plan, annotation=TesterPlan, direction="write"
                ),
                "targetPlan": convert_and_respect_annotation_metadata(
                    object_=target_plan, annotation=TargetPlan, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TestSuite,
                    construct_type(
                        type_=TestSuite,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
