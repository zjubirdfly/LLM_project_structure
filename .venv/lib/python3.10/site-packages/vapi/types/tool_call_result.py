# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .tool_call_result_message import ToolCallResultMessage


class ToolCallResult(UncheckedBaseModel):
    message: typing.Optional[ToolCallResultMessage] = pydantic.Field(default=None)
    """
    This is the message that will be spoken to the user.
    
    If this is not returned, assistant will speak:
    1. a `request-complete` or `request-failed` message from `tool.messages`, if it exists
    2. a response generated by the model, if not
    """

    name: str = pydantic.Field()
    """
    This is the name of the function the model called.
    """

    tool_call_id: typing_extensions.Annotated[str, FieldMetadata(alias="toolCallId")] = pydantic.Field()
    """
    This is the unique identifier for the tool call.
    """

    result: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the result if the tool call was successful. This is added to the conversation history.
    
    Further, if this is returned, assistant will speak:
    1. the `message`, if it exists and is of type `request-complete`
    2. a `request-complete` message from `tool.messages`, if it exists
    3. a response generated by the model, if neither exist
    """

    error: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the error if the tool call was not successful. This is added to the conversation history.
    
    Further, if this is returned, assistant will speak:
    1. the `message`, if it exists and is of type `request-failed`
    2. a `request-failed` message from `tool.messages`, if it exists
    3. a response generated by the model, if neither exist
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    This is optional metadata for the tool call result to be sent to the client.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
