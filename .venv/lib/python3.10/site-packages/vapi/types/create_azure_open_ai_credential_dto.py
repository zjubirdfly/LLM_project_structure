# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .create_azure_open_ai_credential_dto_models_item import CreateAzureOpenAiCredentialDtoModelsItem
from .create_azure_open_ai_credential_dto_region import CreateAzureOpenAiCredentialDtoRegion


class CreateAzureOpenAiCredentialDto(UncheckedBaseModel):
    provider: typing.Literal["azure-openai"] = "azure-openai"
    region: CreateAzureOpenAiCredentialDtoRegion
    models: typing.List[CreateAzureOpenAiCredentialDtoModelsItem]
    open_ai_key: typing_extensions.Annotated[str, FieldMetadata(alias="openAIKey")] = pydantic.Field()
    """
    This is not returned in the API.
    """

    ocp_apim_subscription_key: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="ocpApimSubscriptionKey")
    ] = pydantic.Field(default=None)
    """
    This is not returned in the API.
    """

    open_ai_endpoint: typing_extensions.Annotated[str, FieldMetadata(alias="openAIEndpoint")]
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of credential. This is just for your reference.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
