# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class ChatCompletionMessageMetadata(UncheckedBaseModel):
    task_name: typing_extensions.Annotated[str, FieldMetadata(alias="taskName")]
    task_type: typing_extensions.Annotated[str, FieldMetadata(alias="taskType")]
    task_output: typing_extensions.Annotated[str, FieldMetadata(alias="taskOutput")]
    task_state: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="taskState")
    ] = None
    node_trace: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="nodeTrace")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
