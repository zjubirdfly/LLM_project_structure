# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .token_restrictions import TokenRestrictions
from .token_tag import TokenTag


class Token(UncheckedBaseModel):
    tag: typing.Optional[TokenTag] = pydantic.Field(default=None)
    """
    This is the tag for the token. It represents its scope.
    """

    id: str = pydantic.Field()
    """
    This is the unique identifier for the token.
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    This is unique identifier for the org that this token belongs to.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the token was created.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the token was last updated.
    """

    value: str = pydantic.Field()
    """
    This is the token key.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of the token. This is just for your own reference.
    """

    restrictions: typing.Optional[TokenRestrictions] = pydantic.Field(default=None)
    """
    This are the restrictions for the token.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
