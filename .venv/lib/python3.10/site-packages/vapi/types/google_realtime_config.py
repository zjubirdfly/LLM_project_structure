# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .gemini_multimodal_live_speech_config import GeminiMultimodalLiveSpeechConfig


class GoogleRealtimeConfig(UncheckedBaseModel):
    top_p: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="topP")] = pydantic.Field(
        default=None
    )
    """
    This is the nucleus sampling parameter that controls the cumulative probability of tokens considered during text generation.
    Only applicable with the Gemini Flash 2.0 Multimodal Live API.
    """

    top_k: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="topK")] = pydantic.Field(
        default=None
    )
    """
    This is the top-k sampling parameter that limits the number of highest probability tokens considered during text generation.
    Only applicable with the Gemini Flash 2.0 Multimodal Live API.
    """

    presence_penalty: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="presencePenalty")] = (
        pydantic.Field(default=None)
    )
    """
    This is the presence penalty parameter that influences the model's likelihood to repeat information by penalizing tokens based on their presence in the text.
    Only applicable with the Gemini Flash 2.0 Multimodal Live API.
    """

    frequency_penalty: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="frequencyPenalty")] = (
        pydantic.Field(default=None)
    )
    """
    This is the frequency penalty parameter that influences the model's likelihood to repeat tokens by penalizing them based on their frequency in the text.
    Only applicable with the Gemini Flash 2.0 Multimodal Live API.
    """

    speech_config: typing_extensions.Annotated[
        typing.Optional[GeminiMultimodalLiveSpeechConfig], FieldMetadata(alias="speechConfig")
    ] = pydantic.Field(default=None)
    """
    This is the speech configuration object that defines the voice settings to be used for the model's speech output.
    Only applicable with the Gemini Flash 2.0 Multimodal Live API.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
