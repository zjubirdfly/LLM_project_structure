# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .test_suite_run_scorer_ai_result import TestSuiteRunScorerAiResult


class TestSuiteRunScorerAi(UncheckedBaseModel):
    type: typing.Literal["ai"] = pydantic.Field(default="ai")
    """
    This is the type of the scorer, which must be AI.
    """

    result: TestSuiteRunScorerAiResult = pydantic.Field()
    """
    This is the result of the test suite.
    """

    reasoning: str = pydantic.Field()
    """
    This is the reasoning provided by the AI scorer.
    """

    rubric: str = pydantic.Field()
    """
    This is the rubric used by the AI scorer.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
