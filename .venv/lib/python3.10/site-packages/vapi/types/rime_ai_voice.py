# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .chunk_plan import ChunkPlan
from .fallback_plan import FallbackPlan
from .rime_ai_voice_id import RimeAiVoiceId
from .rime_ai_voice_model import RimeAiVoiceModel


class RimeAiVoice(UncheckedBaseModel):
    caching_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cachingEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This is the flag to toggle voice caching for the assistant.
    """

    provider: typing.Literal["rime-ai"] = pydantic.Field(default="rime-ai")
    """
    This is the voice provider that will be used.
    """

    voice_id: typing_extensions.Annotated[RimeAiVoiceId, FieldMetadata(alias="voiceId")] = pydantic.Field()
    """
    This is the provider-specific ID that will be used.
    """

    model: typing.Optional[RimeAiVoiceModel] = pydantic.Field(default=None)
    """
    This is the model that will be used. Defaults to 'v1' when not specified.
    """

    speed: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the speed multiplier that will be used.
    """

    pause_between_brackets: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="pauseBetweenBrackets")
    ] = pydantic.Field(default=None)
    """
    This is a flag that controls whether to add slight pauses using angle brackets. Example: "Hi. <200> I'd love to have a conversation with you." adds a 200ms pause between the first and second sentences.
    """

    phonemize_between_brackets: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="phonemizeBetweenBrackets")
    ] = pydantic.Field(default=None)
    """
    This is a flag that controls whether text inside brackets should be phonemized (converted to phonetic pronunciation) - Example: "{h'El.o} World" will pronounce "Hello" as expected.
    """

    reduce_latency: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="reduceLatency")] = (
        pydantic.Field(default=None)
    )
    """
    This is a flag that controls whether to optimize for reduced latency in streaming. https://docs.rime.ai/api-reference/endpoint/websockets#param-reduce-latency
    """

    inline_speed_alpha: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="inlineSpeedAlpha")] = (
        pydantic.Field(default=None)
    )
    """
    This is a string that allows inline speed control using alpha notation. https://docs.rime.ai/api-reference/endpoint/websockets#param-inline-speed-alpha
    """

    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the plan for chunking the model output before it is sent to the voice provider.
    """

    fallback_plan: typing_extensions.Annotated[typing.Optional[FallbackPlan], FieldMetadata(alias="fallbackPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the plan for voice provider fallbacks in the event that the primary voice provider fails.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
