# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .conversation_node_model import ConversationNodeModel
from .conversation_node_transcriber import ConversationNodeTranscriber
from .conversation_node_voice import ConversationNodeVoice
from .global_node_plan import GlobalNodePlan
from .variable_extraction_plan import VariableExtractionPlan


class ConversationNode(UncheckedBaseModel):
    type: typing.Literal["conversation"] = pydantic.Field(default="conversation")
    """
    This is the Conversation node. This can be used to start a conversation with the customer.
    
    The flow is:
    - Workflow starts the conversation node
    - Model is active with the `prompt` and global context.
    - Model will call a tool to exit this node.
    - Workflow will extract variables from the conversation.
    - Workflow continues.
    """

    model: typing.Optional[ConversationNodeModel] = pydantic.Field(default=None)
    """
    This is the model for the Conversation Task.
    """

    transcriber: typing.Optional[ConversationNodeTranscriber] = pydantic.Field(default=None)
    """
    These are the options for the assistant's transcriber.
    """

    voice: typing.Optional[ConversationNodeVoice] = pydantic.Field(default=None)
    """
    These are the options for the assistant's voice.
    """

    prompt: typing.Optional[str] = None
    global_node_plan: typing_extensions.Annotated[
        typing.Optional[GlobalNodePlan], FieldMetadata(alias="globalNodePlan")
    ] = pydantic.Field(default=None)
    """
    This is the plan for the global node.
    """

    variable_extraction_plan: typing_extensions.Annotated[
        typing.Optional[VariableExtractionPlan], FieldMetadata(alias="variableExtractionPlan")
    ] = pydantic.Field(default=None)
    """
    This is the plan that controls the variable extraction from the user's response.
    """

    name: str
    is_start: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isStart")] = pydantic.Field(
        default=None
    )
    """
    This is whether or not the node is the start of the workflow.
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    This is for metadata you want to store on the task.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
