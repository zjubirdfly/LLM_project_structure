# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .assistant_overrides import AssistantOverrides
from .create_assistant_dto import CreateAssistantDto
from .create_squad_dto import CreateSquadDto
from .create_workflow_dto import CreateWorkflowDto


class CreateWebCallDto(UncheckedBaseModel):
    assistant_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the assistant ID that will be used for the call. To use a transient assistant, use `assistant` instead.
    
    To start a call with:
    - Assistant, use `assistantId` or `assistant`
    - Squad, use `squadId` or `squad`
    - Workflow, use `workflowId` or `workflow`
    """

    assistant: typing.Optional[CreateAssistantDto] = pydantic.Field(default=None)
    """
    This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.
    
    To start a call with:
    - Assistant, use `assistant`
    - Squad, use `squad`
    - Workflow, use `workflow`
    """

    assistant_overrides: typing_extensions.Annotated[
        typing.Optional[AssistantOverrides], FieldMetadata(alias="assistantOverrides")
    ] = pydantic.Field(default=None)
    """
    These are the overrides for the `assistant` or `assistantId`'s settings and template variables.
    """

    squad_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="squadId")] = pydantic.Field(
        default=None
    )
    """
    This is the squad that will be used for the call. To use a transient squad, use `squad` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    squad: typing.Optional[CreateSquadDto] = pydantic.Field(default=None)
    """
    This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    workflow_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="workflowId")] = pydantic.Field(
        default=None
    )
    """
    [BETA] This feature is in active development. The API and behavior are subject to change as we refine it based on user feedback.
    
    This is the workflow that will be used for the call. To use a transient workflow, use `workflow` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    workflow: typing.Optional[CreateWorkflowDto] = pydantic.Field(default=None)
    """
    [BETA] This feature is in active development. The API and behavior are subject to change as we refine it based on user feedback.
    
    This is a workflow that will be used for the call. To use an existing workflow, use `workflowId` instead.
    
    To start a call with:
    - Assistant, use `assistant` or `assistantId`
    - Squad, use `squad` or `squadId`
    - Workflow, use `workflow` or `workflowId`
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
