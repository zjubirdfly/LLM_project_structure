# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class BucketPlan(UncheckedBaseModel):
    name: str = pydantic.Field()
    """
    This is the name of the bucket.
    """

    region: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the region of the bucket.
    
    Usage:
    - If `credential.type` is `aws`, then this is required.
    - If `credential.type` is `gcp`, then this is optional since GCP allows buckets to be accessed without a region but region is required for data residency requirements. Read here: https://cloud.google.com/storage/docs/request-endpoints
    """

    path: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the path where call artifacts will be stored.
    
    Usage:
    - To store call artifacts in a specific folder, set this to the full path. Eg. "/folder-name1/folder-name2".
    - To store call artifacts in the root of the bucket, leave this blank.
    
    @default "/"
    """

    hmac_access_key: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="hmacAccessKey")] = (
        pydantic.Field(default=None)
    )
    """
    This is the HMAC access key offered by GCP for interoperability with S3 clients. Here is the guide on how to create: https://cloud.google.com/storage/docs/authentication/managing-hmackeys#console
    
    Usage:
    - If `credential.type` is `gcp`, then this is required.
    - If `credential.type` is `aws`, then this is not required since credential.awsAccessKeyId is used instead.
    """

    hmac_secret: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="hmacSecret")] = pydantic.Field(
        default=None
    )
    """
    This is the secret for the HMAC access key. Here is the guide on how to create: https://cloud.google.com/storage/docs/authentication/managing-hmackeys#console
    
    Usage:
    - If `credential.type` is `gcp`, then this is required.
    - If `credential.type` is `aws`, then this is not required since credential.awsSecretAccessKey is used instead.
    
    Note: This is not returned in the API.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
