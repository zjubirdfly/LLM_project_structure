# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .artifact import Artifact
from .call import Call
from .create_assistant_dto import CreateAssistantDto
from .create_customer_dto import CreateCustomerDto
from .open_ai_message import OpenAiMessage
from .server_message_knowledge_base_request_messages_item import ServerMessageKnowledgeBaseRequestMessagesItem
from .server_message_knowledge_base_request_phone_number import ServerMessageKnowledgeBaseRequestPhoneNumber


class ServerMessageKnowledgeBaseRequest(UncheckedBaseModel):
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageKnowledgeBaseRequestPhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = pydantic.Field(default=None)
    """
    This is the phone number that the message is associated with.
    """

    type: typing.Literal["knowledge-base-request"] = pydantic.Field(default="knowledge-base-request")
    """
    This is the type of the message. "knowledge-base-request" is sent to request knowledge base documents. To enable, use `assistant.knowledgeBase.provider=custom-knowledge-base`.
    """

    messages: typing.Optional[typing.List[ServerMessageKnowledgeBaseRequestMessagesItem]] = pydantic.Field(default=None)
    """
    These are the messages that are going to be sent to the `model` right after the `knowledge-base-request` webhook completes.
    """

    messages_open_ai_formatted: typing_extensions.Annotated[
        typing.List[OpenAiMessage], FieldMetadata(alias="messagesOpenAIFormatted")
    ] = pydantic.Field()
    """
    This is just `messages` formatted for OpenAI.
    """

    timestamp: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the timestamp of the message.
    """

    artifact: typing.Optional[Artifact] = pydantic.Field(default=None)
    """
    This is a live version of the `call.artifact`.
    
    This matches what is stored on `call.artifact` after the call.
    """

    assistant: typing.Optional[CreateAssistantDto] = pydantic.Field(default=None)
    """
    This is the assistant that the message is associated with.
    """

    customer: typing.Optional[CreateCustomerDto] = pydantic.Field(default=None)
    """
    This is the customer that the message is associated with.
    """

    call: typing.Optional[Call] = pydantic.Field(default=None)
    """
    This is the call that the message is associated with.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
