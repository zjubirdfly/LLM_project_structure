# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .sbc_configuration import SbcConfiguration
from .sip_trunk_gateway import SipTrunkGateway
from .sip_trunk_outbound_authentication_plan import SipTrunkOutboundAuthenticationPlan


class UpdateByoSipTrunkCredentialDto(UncheckedBaseModel):
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of credential. This is just for your reference.
    """

    gateways: typing.Optional[typing.List[SipTrunkGateway]] = pydantic.Field(default=None)
    """
    This is the list of SIP trunk's gateways.
    """

    outbound_authentication_plan: typing_extensions.Annotated[
        typing.Optional[SipTrunkOutboundAuthenticationPlan], FieldMetadata(alias="outboundAuthenticationPlan")
    ] = pydantic.Field(default=None)
    """
    This can be used to configure the outbound authentication if required by the SIP trunk.
    """

    outbound_leading_plus_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="outboundLeadingPlusEnabled")
    ] = pydantic.Field(default=None)
    """
    This ensures the outbound origination attempts have a leading plus. Defaults to false to match conventional telecom behavior.
    
    Usage:
    - Vonage/Twilio requires leading plus for all outbound calls. Set this to true.
    
    @default false
    """

    tech_prefix: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="techPrefix")] = pydantic.Field(
        default=None
    )
    """
    This can be used to configure the tech prefix on outbound calls. This is an advanced property.
    """

    sip_diversion_header: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="sipDiversionHeader")
    ] = pydantic.Field(default=None)
    """
    This can be used to enable the SIP diversion header for authenticating the calling number if the SIP trunk supports it. This is an advanced property.
    """

    sbc_configuration: typing_extensions.Annotated[
        typing.Optional[SbcConfiguration], FieldMetadata(alias="sbcConfiguration")
    ] = pydantic.Field(default=None)
    """
    This is an advanced configuration for enterprise deployments. This uses the onprem SBC to trunk into the SIP trunk's `gateways`, rather than the managed SBC provided by Vapi.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
