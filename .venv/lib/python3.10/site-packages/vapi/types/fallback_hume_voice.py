# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .chunk_plan import ChunkPlan


class FallbackHumeVoice(UncheckedBaseModel):
    caching_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cachingEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This is the flag to toggle voice caching for the assistant.
    """

    provider: typing.Literal["hume"] = pydantic.Field(default="hume")
    """
    This is the voice provider that will be used.
    """

    model: typing.Optional[typing.Literal["octave"]] = pydantic.Field(default=None)
    """
    This is the model that will be used.
    """

    voice_id: typing_extensions.Annotated[str, FieldMetadata(alias="voiceId")] = pydantic.Field()
    """
    The ID of the particular voice you want to use.
    """

    is_custom_hume_voice: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="isCustomHumeVoice")
    ] = pydantic.Field(default=None)
    """
    Indicates whether the chosen voice is a preset Hume AI voice or a custom voice.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Natural language instructions describing how the synthesized speech should sound, including but not limited to tone, intonation, pacing, and accent (e.g., 'a soft, gentle voice with a strong British accent').
    
    If a Voice is specified in the request, this description serves as acting instructions.
    If no Voice is specified, a new voice is generated based on this description.
    """

    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the plan for chunking the model output before it is sent to the voice provider.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
