# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class GlobalNodePlan(UncheckedBaseModel):
    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    This is the flag to determine if this node is a global node
    
    @default false
    """

    enter_condition: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="enterCondition")] = (
        pydantic.Field(default=None)
    )
    """
    This is the condition that will be checked to determine if the global node should be executed.
    
    @default ''
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
