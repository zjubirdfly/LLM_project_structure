# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .artifact import Artifact
from .call import Call
from .create_assistant_dto import CreateAssistantDto
from .create_customer_dto import CreateCustomerDto
from .open_ai_message import OpenAiMessage
from .server_message_status_update_destination import ServerMessageStatusUpdateDestination
from .server_message_status_update_ended_reason import ServerMessageStatusUpdateEndedReason
from .server_message_status_update_messages_item import ServerMessageStatusUpdateMessagesItem
from .server_message_status_update_phone_number import ServerMessageStatusUpdatePhoneNumber
from .server_message_status_update_status import ServerMessageStatusUpdateStatus


class ServerMessageStatusUpdate(UncheckedBaseModel):
    phone_number: typing_extensions.Annotated[
        typing.Optional[ServerMessageStatusUpdatePhoneNumber], FieldMetadata(alias="phoneNumber")
    ] = pydantic.Field(default=None)
    """
    This is the phone number that the message is associated with.
    """

    type: typing.Literal["status-update"] = pydantic.Field(default="status-update")
    """
    This is the type of the message. "status-update" is sent whenever the `call.status` changes.
    """

    status: ServerMessageStatusUpdateStatus = pydantic.Field()
    """
    This is the status of the call.
    """

    ended_reason: typing_extensions.Annotated[
        typing.Optional[ServerMessageStatusUpdateEndedReason], FieldMetadata(alias="endedReason")
    ] = pydantic.Field(default=None)
    """
    This is the reason the call ended. This is only sent if the status is "ended".
    """

    messages: typing.Optional[typing.List[ServerMessageStatusUpdateMessagesItem]] = pydantic.Field(default=None)
    """
    These are the conversation messages of the call. This is only sent if the status is "forwarding".
    """

    messages_open_ai_formatted: typing_extensions.Annotated[
        typing.Optional[typing.List[OpenAiMessage]], FieldMetadata(alias="messagesOpenAIFormatted")
    ] = pydantic.Field(default=None)
    """
    These are the conversation messages of the call. This is only sent if the status is "forwarding".
    """

    destination: typing.Optional[ServerMessageStatusUpdateDestination] = pydantic.Field(default=None)
    """
    This is the destination the call is being transferred to. This is only sent if the status is "forwarding".
    """

    timestamp: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the timestamp of the message.
    """

    artifact: typing.Optional[Artifact] = pydantic.Field(default=None)
    """
    This is a live version of the `call.artifact`.
    
    This matches what is stored on `call.artifact` after the call.
    """

    assistant: typing.Optional[CreateAssistantDto] = pydantic.Field(default=None)
    """
    This is the assistant that the message is associated with.
    """

    customer: typing.Optional[CreateCustomerDto] = pydantic.Field(default=None)
    """
    This is the customer that the message is associated with.
    """

    call: typing.Optional[Call] = pydantic.Field(default=None)
    """
    This is the call that the message is associated with.
    """

    transcript: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the transcript of the call. This is only sent if the status is "forwarding".
    """

    summary: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the summary of the call. This is only sent if the status is "forwarding".
    """

    inbound_phone_call_debugging_artifacts: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]],
        FieldMetadata(alias="inboundPhoneCallDebuggingArtifacts"),
    ] = pydantic.Field(default=None)
    """
    This is the inbound phone call debugging artifacts. This is only sent if the status is "ended" and there was an error accepting the inbound phone call.
    
    This will include any errors related to the "assistant-request" if one was made.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
