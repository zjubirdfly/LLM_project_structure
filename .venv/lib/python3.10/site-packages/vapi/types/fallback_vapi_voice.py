# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .chunk_plan import ChunkPlan
from .fallback_vapi_voice_language import FallbackVapiVoiceLanguage
from .fallback_vapi_voice_voice_id import FallbackVapiVoiceVoiceId


class FallbackVapiVoice(UncheckedBaseModel):
    caching_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cachingEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This is the flag to toggle voice caching for the assistant.
    """

    provider: typing.Literal["vapi"] = pydantic.Field(default="vapi")
    """
    This is the voice provider that will be used.
    """

    voice_id: typing_extensions.Annotated[FallbackVapiVoiceVoiceId, FieldMetadata(alias="voiceId")] = pydantic.Field()
    """
    The voices provided by Vapi
    """

    speed: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the speed multiplier that will be used.
    
    @default 1
    """

    language: typing.Optional[FallbackVapiVoiceLanguage] = pydantic.Field(default=None)
    """
    This is the language code (ISO 639-1) that will be used.
    
    @default 'en-US'
    """

    chunk_plan: typing_extensions.Annotated[typing.Optional[ChunkPlan], FieldMetadata(alias="chunkPlan")] = (
        pydantic.Field(default=None)
    )
    """
    This is the plan for chunking the model output before it is sent to the voice provider.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
