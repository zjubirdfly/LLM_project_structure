# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .regex_option import RegexOption


class RegexReplacement(UncheckedBaseModel):
    type: typing.Literal["regex"] = pydantic.Field(default="regex")
    """
    This is the regex replacement type. You can use this to replace a word or phrase that matches a pattern.
    
    Usage:
    - Replace all numbers with "some number": { type: 'regex', regex: '\\d+', value: 'some number' }
    - Replace email addresses with "[EMAIL]": { type: 'regex', regex: '\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', value: '[EMAIL]' }
    - Replace phone numbers with a formatted version: { type: 'regex', regex: '(\\d{3})(\\d{3})(\\d{4})', value: '($1) $2-$3' }
    - Replace all instances of "color" or "colour" with "hue": { type: 'regex', regex: 'colou?r', value: 'hue' }
    - Capitalize the first letter of every sentence: { type: 'regex', regex: '(?<=\\. |^)[a-z]', value: (match) => match.toUpperCase() }
    """

    regex: str = pydantic.Field()
    """
    This is the regex pattern to replace.
    
    Note:
    - This works by using the `string.replace` method in Node.JS. Eg. `"hello there".replace(/hello/g, "hi")` will return `"hi there"`.
    
    Hot tip:
    - In JavaScript, escape `\` when sending the regex pattern. Eg. `"hello\sthere"` will be sent over the wire as `"hellosthere"`. Send `"hello\\sthere"` instead.
    """

    options: typing.Optional[typing.List[RegexOption]] = pydantic.Field(default=None)
    """
    These are the options for the regex replacement. Defaults to all disabled.
    
    @default []
    """

    value: str = pydantic.Field()
    """
    This is the value that will replace the match.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
