# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .assistant_overrides import AssistantOverrides
from .create_assistant_dto import CreateAssistantDto


class TesterPlan(UncheckedBaseModel):
    assistant: typing.Optional[CreateAssistantDto] = pydantic.Field(default=None)
    """
    Pass a transient assistant to use for the test assistant.
    
    Make sure to write a detailed system prompt for a test assistant, and use the {{test.script}} variable to access the test script.
    """

    assistant_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantId")] = (
        pydantic.Field(default=None)
    )
    """
    Pass an assistant id that can be access
    
    Make sure to write a detailed system prompt for the test assistant, and use the {{test.script}} variable to access the test script.
    """

    assistant_overrides: typing_extensions.Annotated[
        typing.Optional[AssistantOverrides], FieldMetadata(alias="assistantOverrides")
    ] = pydantic.Field(default=None)
    """
    Add any assistant overrides to the test assistant.
    
    One use case is if you want to pass custom variables into the test using variableValues, that you can then access in the script
    and rubric using {{varName}}.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
