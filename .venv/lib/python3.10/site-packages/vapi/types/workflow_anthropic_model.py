# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .anthropic_thinking_config import AnthropicThinkingConfig
from .workflow_anthropic_model_model import WorkflowAnthropicModelModel


class WorkflowAnthropicModel(UncheckedBaseModel):
    provider: typing.Literal["anthropic"] = pydantic.Field(default="anthropic")
    """
    This is the provider of the model (`anthropic`).
    """

    model: WorkflowAnthropicModelModel = pydantic.Field()
    """
    This is the specific model that will be used.
    """

    thinking: typing.Optional[AnthropicThinkingConfig] = pydantic.Field(default=None)
    """
    This is the optional configuration for Anthropic's thinking feature.
    
    - Only applicable for `claude-3-7-sonnet-20250219` model.
    - If provided, `maxTokens` must be greater than `thinking.budgetTokens`.
    """

    temperature: typing.Optional[float] = pydantic.Field(default=None)
    """
    This is the temperature of the model.
    """

    max_tokens: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="maxTokens")] = pydantic.Field(
        default=None
    )
    """
    This is the max tokens of the model.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
