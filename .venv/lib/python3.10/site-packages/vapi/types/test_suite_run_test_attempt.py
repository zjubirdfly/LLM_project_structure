# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .test_suite_run_scorer_ai import TestSuiteRunScorerAi
from .test_suite_run_test_attempt_call import TestSuiteRunTestAttemptCall
from .test_suite_run_test_attempt_metadata import TestSuiteRunTestAttemptMetadata


class TestSuiteRunTestAttempt(UncheckedBaseModel):
    scorer_results: typing_extensions.Annotated[
        typing.List[TestSuiteRunScorerAi], FieldMetadata(alias="scorerResults")
    ] = pydantic.Field()
    """
    These are the results of the scorers used to evaluate the test attempt.
    """

    call: typing.Optional[TestSuiteRunTestAttemptCall] = pydantic.Field(default=None)
    """
    This is the call made during the test attempt.
    """

    call_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callId")] = pydantic.Field(
        default=None
    )
    """
    This is the call ID for the test attempt.
    """

    metadata: typing.Optional[TestSuiteRunTestAttemptMetadata] = pydantic.Field(default=None)
    """
    This is the metadata for the test attempt.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
