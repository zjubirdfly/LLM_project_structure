# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel


class MonitorPlan(UncheckedBaseModel):
    listen_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="listenEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This determines whether the assistant's calls allow live listening. Defaults to true.
    
    Fetch `call.monitor.listenUrl` to get the live listening URL.
    
    @default true
    """

    listen_authentication_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="listenAuthenticationEnabled")
    ] = pydantic.Field(default=None)
    """
    This enables authentication on the `call.monitor.listenUrl`.
    
    If `listenAuthenticationEnabled` is `true`, the `call.monitor.listenUrl` will require an `Authorization: Bearer <vapi-public-api-key>` header.
    
    @default false
    """

    control_enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="controlEnabled")] = (
        pydantic.Field(default=None)
    )
    """
    This determines whether the assistant's calls allow live control. Defaults to true.
    
    Fetch `call.monitor.controlUrl` to get the live control URL.
    
    To use, send any control message via a POST request to `call.monitor.controlUrl`. Here are the types of controls supported: https://docs.vapi.ai/api-reference/messages/client-inbound-message
    
    @default true
    """

    control_authentication_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="controlAuthenticationEnabled")
    ] = pydantic.Field(default=None)
    """
    This enables authentication on the `call.monitor.controlUrl`.
    
    If `controlAuthenticationEnabled` is `true`, the `call.monitor.controlUrl` will require an `Authorization: Bearer <vapi-public-api-key>` header.
    
    @default false
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
