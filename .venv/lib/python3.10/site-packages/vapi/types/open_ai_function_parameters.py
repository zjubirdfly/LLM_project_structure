# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .json_schema import JsonSchema


class OpenAiFunctionParameters(UncheckedBaseModel):
    type: typing.Literal["object"] = pydantic.Field(default="object")
    """
    This must be set to 'object'. It instructs the model to return a JSON object containing the function call properties.
    """

    properties: typing.Dict[str, JsonSchema] = pydantic.Field()
    """
    This provides a description of the properties required by the function.
    JSON Schema can be used to specify expectations for each property.
    Refer to [this doc](https://ajv.js.org/json-schema.html#json-data-type) for a comprehensive guide on JSON Schema.
    """

    required: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    This specifies the properties that are required by the function.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
